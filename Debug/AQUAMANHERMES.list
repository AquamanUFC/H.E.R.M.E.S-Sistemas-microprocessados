
AQUAMANHERMES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080014d8  080014d8  000114d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001500  08001500  00011500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001504  08001504  00011504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000068  20000004  0800150c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000006c  0800150c  0002006c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009f21  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018b7  00000000  00000000  00029f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000209a  00000000  00000000  0002b805  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004a8  00000000  00000000  0002d8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005c0  00000000  00000000  0002dd48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002b99  00000000  00000000  0002e308  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001d84  00000000  00000000  00030ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00032c25  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000bf4  00000000  00000000  00032ca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080014c0 	.word	0x080014c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080014c0 	.word	0x080014c0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_InitTick+0x24>)
{
 800064a:	b510      	push	{r4, lr}
 800064c:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800064e:	6818      	ldr	r0, [r3, #0]
 8000650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000654:	fbb0 f0f3 	udiv	r0, r0, r3
 8000658:	f000 f87c 	bl	8000754 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800065c:	2200      	movs	r2, #0
 800065e:	4621      	mov	r1, r4
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f000 f836 	bl	80006d4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000668:	2000      	movs	r0, #0
 800066a:	bd10      	pop	{r4, pc}
 800066c:	20000000 	.word	0x20000000

08000670 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_Init+0x20>)
{
 8000672:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000674:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000676:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000678:	f043 0310 	orr.w	r3, r3, #16
 800067c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067e:	f000 f817 	bl	80006b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ffe0 	bl	8000648 <HAL_InitTick>
  HAL_MspInit();
 8000688:	f000 fe20 	bl	80012cc <HAL_MspInit>
}
 800068c:	2000      	movs	r0, #0
 800068e:	bd08      	pop	{r3, pc}
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000694:	4a02      	ldr	r2, [pc, #8]	; (80006a0 <HAL_IncTick+0xc>)
 8000696:	6813      	ldr	r3, [r2, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000028 	.word	0x20000028

080006a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006a4:	4b01      	ldr	r3, [pc, #4]	; (80006ac <HAL_GetTick+0x8>)
 80006a6:	6818      	ldr	r0, [r3, #0]
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028

080006b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006be:	041b      	lsls	r3, r3, #16
 80006c0:	0c1b      	lsrs	r3, r3, #16
 80006c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006cc:	60d3      	str	r3, [r2, #12]
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d6:	b530      	push	{r4, r5, lr}
 80006d8:	68dc      	ldr	r4, [r3, #12]
 80006da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	bf28      	it	cs
 80006e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f0:	bf98      	it	ls
 80006f2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	fa05 f303 	lsl.w	r3, r5, r3
 80006f8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fc:	bf88      	it	hi
 80006fe:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4019      	ands	r1, r3
 8000702:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	fa05 f404 	lsl.w	r4, r5, r4
 8000708:	3c01      	subs	r4, #1
 800070a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800070c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070e:	ea42 0201 	orr.w	r2, r2, r1
 8000712:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	bfaf      	iteee	ge
 8000718:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	4b06      	ldrlt	r3, [pc, #24]	; (8000738 <HAL_NVIC_SetPriority+0x64>)
 800071e:	f000 000f 	andlt.w	r0, r0, #15
 8000722:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	bfa5      	ittet	ge
 8000726:	b2d2      	uxtbge	r2, r2
 8000728:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000732:	bd30      	pop	{r4, r5, pc}
 8000734:	e000ed00 	.word	0xe000ed00
 8000738:	e000ed14 	.word	0xe000ed14

0800073c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800073c:	2301      	movs	r3, #1
 800073e:	0942      	lsrs	r2, r0, #5
 8000740:	f000 001f 	and.w	r0, r0, #31
 8000744:	fa03 f000 	lsl.w	r0, r3, r0
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <HAL_NVIC_EnableIRQ+0x14>)
 800074a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800074e:	4770      	bx	lr
 8000750:	e000e100 	.word	0xe000e100

08000754 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	3801      	subs	r0, #1
 8000756:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075a:	d20a      	bcs.n	8000772 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000772:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000782:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	bf0c      	ite	eq
 8000788:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800078c:	f022 0204 	bicne.w	r2, r2, #4
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	4770      	bx	lr
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000798:	4770      	bx	lr

0800079a <HAL_SYSTICK_IRQHandler>:
{
 800079a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800079c:	f7ff fffc 	bl	8000798 <HAL_SYSTICK_Callback>
 80007a0:	bd08      	pop	{r3, pc}
	...

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80007a8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007aa:	4616      	mov	r6, r2
 80007ac:	4b65      	ldr	r3, [pc, #404]	; (8000944 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ae:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000954 <HAL_GPIO_Init+0x1b0>
 80007b2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000958 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80007b6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ba:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80007bc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80007c4:	45a0      	cmp	r8, r4
 80007c6:	d17f      	bne.n	80008c8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80007c8:	684d      	ldr	r5, [r1, #4]
 80007ca:	2d12      	cmp	r5, #18
 80007cc:	f000 80af 	beq.w	800092e <HAL_GPIO_Init+0x18a>
 80007d0:	f200 8088 	bhi.w	80008e4 <HAL_GPIO_Init+0x140>
 80007d4:	2d02      	cmp	r5, #2
 80007d6:	f000 80a7 	beq.w	8000928 <HAL_GPIO_Init+0x184>
 80007da:	d87c      	bhi.n	80008d6 <HAL_GPIO_Init+0x132>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	f000 808e 	beq.w	80008fe <HAL_GPIO_Init+0x15a>
 80007e2:	2d01      	cmp	r5, #1
 80007e4:	f000 809e 	beq.w	8000924 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80007e8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007ec:	2cff      	cmp	r4, #255	; 0xff
 80007ee:	bf93      	iteet	ls
 80007f0:	4682      	movls	sl, r0
 80007f2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80007f6:	3d08      	subhi	r5, #8
 80007f8:	f8d0 b000 	ldrls.w	fp, [r0]
 80007fc:	bf92      	itee	ls
 80007fe:	00b5      	lslls	r5, r6, #2
 8000800:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000804:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000806:	fa09 f805 	lsl.w	r8, r9, r5
 800080a:	ea2b 0808 	bic.w	r8, fp, r8
 800080e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000812:	bf88      	it	hi
 8000814:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000818:	ea48 0505 	orr.w	r5, r8, r5
 800081c:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000820:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000824:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000828:	d04e      	beq.n	80008c8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4d47      	ldr	r5, [pc, #284]	; (8000948 <HAL_GPIO_Init+0x1a4>)
 800082c:	4f46      	ldr	r7, [pc, #280]	; (8000948 <HAL_GPIO_Init+0x1a4>)
 800082e:	69ad      	ldr	r5, [r5, #24]
 8000830:	f026 0803 	bic.w	r8, r6, #3
 8000834:	f045 0501 	orr.w	r5, r5, #1
 8000838:	61bd      	str	r5, [r7, #24]
 800083a:	69bd      	ldr	r5, [r7, #24]
 800083c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000840:	f005 0501 	and.w	r5, r5, #1
 8000844:	9501      	str	r5, [sp, #4]
 8000846:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800084a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800084e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000850:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000854:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000858:	fa09 f90b 	lsl.w	r9, r9, fp
 800085c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000860:	4d3a      	ldr	r5, [pc, #232]	; (800094c <HAL_GPIO_Init+0x1a8>)
 8000862:	42a8      	cmp	r0, r5
 8000864:	d068      	beq.n	8000938 <HAL_GPIO_Init+0x194>
 8000866:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086a:	42a8      	cmp	r0, r5
 800086c:	d066      	beq.n	800093c <HAL_GPIO_Init+0x198>
 800086e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000872:	42a8      	cmp	r0, r5
 8000874:	d064      	beq.n	8000940 <HAL_GPIO_Init+0x19c>
 8000876:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087a:	42a8      	cmp	r0, r5
 800087c:	bf0c      	ite	eq
 800087e:	2503      	moveq	r5, #3
 8000880:	2504      	movne	r5, #4
 8000882:	fa05 f50b 	lsl.w	r5, r5, fp
 8000886:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800088a:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800088e:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000890:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000894:	bf14      	ite	ne
 8000896:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000898:	43a5      	biceq	r5, r4
 800089a:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800089c:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800089e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80008a2:	bf14      	ite	ne
 80008a4:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80008a6:	43a5      	biceq	r5, r4
 80008a8:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80008aa:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ac:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80008b0:	bf14      	ite	ne
 80008b2:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80008b4:	43a5      	biceq	r5, r4
 80008b6:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80008b8:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ba:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80008be:	bf14      	ite	ne
 80008c0:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80008c2:	ea25 0404 	biceq.w	r4, r5, r4
 80008c6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80008c8:	3601      	adds	r6, #1
 80008ca:	2e10      	cmp	r6, #16
 80008cc:	f47f af73 	bne.w	80007b6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80008d0:	b003      	add	sp, #12
 80008d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80008d6:	2d03      	cmp	r5, #3
 80008d8:	d022      	beq.n	8000920 <HAL_GPIO_Init+0x17c>
 80008da:	2d11      	cmp	r5, #17
 80008dc:	d184      	bne.n	80007e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008de:	68ca      	ldr	r2, [r1, #12]
 80008e0:	3204      	adds	r2, #4
          break;
 80008e2:	e781      	b.n	80007e8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80008e4:	4f1a      	ldr	r7, [pc, #104]	; (8000950 <HAL_GPIO_Init+0x1ac>)
 80008e6:	42bd      	cmp	r5, r7
 80008e8:	d009      	beq.n	80008fe <HAL_GPIO_Init+0x15a>
 80008ea:	d812      	bhi.n	8000912 <HAL_GPIO_Init+0x16e>
 80008ec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800095c <HAL_GPIO_Init+0x1b8>
 80008f0:	454d      	cmp	r5, r9
 80008f2:	d004      	beq.n	80008fe <HAL_GPIO_Init+0x15a>
 80008f4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80008f8:	454d      	cmp	r5, r9
 80008fa:	f47f af75 	bne.w	80007e8 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80008fe:	688a      	ldr	r2, [r1, #8]
 8000900:	b1c2      	cbz	r2, 8000934 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000902:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000904:	bf0c      	ite	eq
 8000906:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800090a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800090e:	2208      	movs	r2, #8
 8000910:	e76a      	b.n	80007e8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000912:	4575      	cmp	r5, lr
 8000914:	d0f3      	beq.n	80008fe <HAL_GPIO_Init+0x15a>
 8000916:	4565      	cmp	r5, ip
 8000918:	d0f1      	beq.n	80008fe <HAL_GPIO_Init+0x15a>
 800091a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000960 <HAL_GPIO_Init+0x1bc>
 800091e:	e7eb      	b.n	80008f8 <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000920:	2200      	movs	r2, #0
 8000922:	e761      	b.n	80007e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000924:	68ca      	ldr	r2, [r1, #12]
          break;
 8000926:	e75f      	b.n	80007e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000928:	68ca      	ldr	r2, [r1, #12]
 800092a:	3208      	adds	r2, #8
          break;
 800092c:	e75c      	b.n	80007e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800092e:	68ca      	ldr	r2, [r1, #12]
 8000930:	320c      	adds	r2, #12
          break;
 8000932:	e759      	b.n	80007e8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000934:	2204      	movs	r2, #4
 8000936:	e757      	b.n	80007e8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000938:	2500      	movs	r5, #0
 800093a:	e7a2      	b.n	8000882 <HAL_GPIO_Init+0xde>
 800093c:	2501      	movs	r5, #1
 800093e:	e7a0      	b.n	8000882 <HAL_GPIO_Init+0xde>
 8000940:	2502      	movs	r5, #2
 8000942:	e79e      	b.n	8000882 <HAL_GPIO_Init+0xde>
 8000944:	40010400 	.word	0x40010400
 8000948:	40021000 	.word	0x40021000
 800094c:	40010800 	.word	0x40010800
 8000950:	10210000 	.word	0x10210000
 8000954:	10310000 	.word	0x10310000
 8000958:	10320000 	.word	0x10320000
 800095c:	10110000 	.word	0x10110000
 8000960:	10220000 	.word	0x10220000

08000964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000964:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000968:	6959      	ldr	r1, [r3, #20]
 800096a:	4201      	tst	r1, r0
 800096c:	d002      	beq.n	8000974 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800096e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000970:	f000 fca4 	bl	80012bc <HAL_GPIO_EXTI_Callback>
 8000974:	bd08      	pop	{r3, pc}
 8000976:	bf00      	nop
 8000978:	40010400 	.word	0x40010400

0800097c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800097c:	6803      	ldr	r3, [r0, #0]
{
 800097e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000982:	07db      	lsls	r3, r3, #31
{
 8000984:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000986:	d410      	bmi.n	80009aa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	079f      	lsls	r7, r3, #30
 800098c:	d45e      	bmi.n	8000a4c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800098e:	682b      	ldr	r3, [r5, #0]
 8000990:	0719      	lsls	r1, r3, #28
 8000992:	f100 8095 	bmi.w	8000ac0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000996:	682b      	ldr	r3, [r5, #0]
 8000998:	075a      	lsls	r2, r3, #29
 800099a:	f100 80bf 	bmi.w	8000b1c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800099e:	69ea      	ldr	r2, [r5, #28]
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	f040 812d 	bne.w	8000c00 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009a6:	2000      	movs	r0, #0
 80009a8:	e014      	b.n	80009d4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009aa:	4c90      	ldr	r4, [pc, #576]	; (8000bec <HAL_RCC_OscConfig+0x270>)
 80009ac:	6863      	ldr	r3, [r4, #4]
 80009ae:	f003 030c 	and.w	r3, r3, #12
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d007      	beq.n	80009c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009b6:	6863      	ldr	r3, [r4, #4]
 80009b8:	f003 030c 	and.w	r3, r3, #12
 80009bc:	2b08      	cmp	r3, #8
 80009be:	d10c      	bne.n	80009da <HAL_RCC_OscConfig+0x5e>
 80009c0:	6863      	ldr	r3, [r4, #4]
 80009c2:	03de      	lsls	r6, r3, #15
 80009c4:	d509      	bpl.n	80009da <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	039c      	lsls	r4, r3, #14
 80009ca:	d5dd      	bpl.n	8000988 <HAL_RCC_OscConfig+0xc>
 80009cc:	686b      	ldr	r3, [r5, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1da      	bne.n	8000988 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009d2:	2001      	movs	r0, #1
}
 80009d4:	b002      	add	sp, #8
 80009d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009da:	686b      	ldr	r3, [r5, #4]
 80009dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e0:	d110      	bne.n	8000a04 <HAL_RCC_OscConfig+0x88>
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009ea:	f7ff fe5b 	bl	80006a4 <HAL_GetTick>
 80009ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	0398      	lsls	r0, r3, #14
 80009f4:	d4c8      	bmi.n	8000988 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009f6:	f7ff fe55 	bl	80006a4 <HAL_GetTick>
 80009fa:	1b80      	subs	r0, r0, r6
 80009fc:	2864      	cmp	r0, #100	; 0x64
 80009fe:	d9f7      	bls.n	80009f0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000a00:	2003      	movs	r0, #3
 8000a02:	e7e7      	b.n	80009d4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a04:	b99b      	cbnz	r3, 8000a2e <HAL_RCC_OscConfig+0xb2>
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a0c:	6023      	str	r3, [r4, #0]
 8000a0e:	6823      	ldr	r3, [r4, #0]
 8000a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a16:	f7ff fe45 	bl	80006a4 <HAL_GetTick>
 8000a1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	0399      	lsls	r1, r3, #14
 8000a20:	d5b2      	bpl.n	8000988 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a22:	f7ff fe3f 	bl	80006a4 <HAL_GetTick>
 8000a26:	1b80      	subs	r0, r0, r6
 8000a28:	2864      	cmp	r0, #100	; 0x64
 8000a2a:	d9f7      	bls.n	8000a1c <HAL_RCC_OscConfig+0xa0>
 8000a2c:	e7e8      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	d103      	bne.n	8000a3e <HAL_RCC_OscConfig+0xc2>
 8000a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a3a:	6023      	str	r3, [r4, #0]
 8000a3c:	e7d1      	b.n	80009e2 <HAL_RCC_OscConfig+0x66>
 8000a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a42:	6023      	str	r3, [r4, #0]
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a4a:	e7cd      	b.n	80009e8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a4c:	4c67      	ldr	r4, [pc, #412]	; (8000bec <HAL_RCC_OscConfig+0x270>)
 8000a4e:	6863      	ldr	r3, [r4, #4]
 8000a50:	f013 0f0c 	tst.w	r3, #12
 8000a54:	d007      	beq.n	8000a66 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a56:	6863      	ldr	r3, [r4, #4]
 8000a58:	f003 030c 	and.w	r3, r3, #12
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d110      	bne.n	8000a82 <HAL_RCC_OscConfig+0x106>
 8000a60:	6863      	ldr	r3, [r4, #4]
 8000a62:	03da      	lsls	r2, r3, #15
 8000a64:	d40d      	bmi.n	8000a82 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	079b      	lsls	r3, r3, #30
 8000a6a:	d502      	bpl.n	8000a72 <HAL_RCC_OscConfig+0xf6>
 8000a6c:	692b      	ldr	r3, [r5, #16]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d1af      	bne.n	80009d2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	696a      	ldr	r2, [r5, #20]
 8000a76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a7e:	6023      	str	r3, [r4, #0]
 8000a80:	e785      	b.n	800098e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a82:	692a      	ldr	r2, [r5, #16]
 8000a84:	4b5a      	ldr	r3, [pc, #360]	; (8000bf0 <HAL_RCC_OscConfig+0x274>)
 8000a86:	b16a      	cbz	r2, 8000aa4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fe0a 	bl	80006a4 <HAL_GetTick>
 8000a90:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	079f      	lsls	r7, r3, #30
 8000a96:	d4ec      	bmi.n	8000a72 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a98:	f7ff fe04 	bl	80006a4 <HAL_GetTick>
 8000a9c:	1b80      	subs	r0, r0, r6
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	d9f7      	bls.n	8000a92 <HAL_RCC_OscConfig+0x116>
 8000aa2:	e7ad      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000aa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aa6:	f7ff fdfd 	bl	80006a4 <HAL_GetTick>
 8000aaa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	0798      	lsls	r0, r3, #30
 8000ab0:	f57f af6d 	bpl.w	800098e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ab4:	f7ff fdf6 	bl	80006a4 <HAL_GetTick>
 8000ab8:	1b80      	subs	r0, r0, r6
 8000aba:	2802      	cmp	r0, #2
 8000abc:	d9f6      	bls.n	8000aac <HAL_RCC_OscConfig+0x130>
 8000abe:	e79f      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ac0:	69aa      	ldr	r2, [r5, #24]
 8000ac2:	4c4a      	ldr	r4, [pc, #296]	; (8000bec <HAL_RCC_OscConfig+0x270>)
 8000ac4:	4b4b      	ldr	r3, [pc, #300]	; (8000bf4 <HAL_RCC_OscConfig+0x278>)
 8000ac6:	b1da      	cbz	r2, 8000b00 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000acc:	f7ff fdea 	bl	80006a4 <HAL_GetTick>
 8000ad0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ad4:	079b      	lsls	r3, r3, #30
 8000ad6:	d50d      	bpl.n	8000af4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ad8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000adc:	4b46      	ldr	r3, [pc, #280]	; (8000bf8 <HAL_RCC_OscConfig+0x27c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ae4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ae6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000ae8:	9b01      	ldr	r3, [sp, #4]
 8000aea:	1e5a      	subs	r2, r3, #1
 8000aec:	9201      	str	r2, [sp, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1f9      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x16a>
 8000af2:	e750      	b.n	8000996 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000af4:	f7ff fdd6 	bl	80006a4 <HAL_GetTick>
 8000af8:	1b80      	subs	r0, r0, r6
 8000afa:	2802      	cmp	r0, #2
 8000afc:	d9e9      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x156>
 8000afe:	e77f      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000b00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b02:	f7ff fdcf 	bl	80006a4 <HAL_GetTick>
 8000b06:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b0a:	079f      	lsls	r7, r3, #30
 8000b0c:	f57f af43 	bpl.w	8000996 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b10:	f7ff fdc8 	bl	80006a4 <HAL_GetTick>
 8000b14:	1b80      	subs	r0, r0, r6
 8000b16:	2802      	cmp	r0, #2
 8000b18:	d9f6      	bls.n	8000b08 <HAL_RCC_OscConfig+0x18c>
 8000b1a:	e771      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b1c:	4c33      	ldr	r4, [pc, #204]	; (8000bec <HAL_RCC_OscConfig+0x270>)
 8000b1e:	69e3      	ldr	r3, [r4, #28]
 8000b20:	00d8      	lsls	r0, r3, #3
 8000b22:	d424      	bmi.n	8000b6e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000b24:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	69e3      	ldr	r3, [r4, #28]
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	61e3      	str	r3, [r4, #28]
 8000b2e:	69e3      	ldr	r3, [r4, #28]
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b38:	4e30      	ldr	r6, [pc, #192]	; (8000bfc <HAL_RCC_OscConfig+0x280>)
 8000b3a:	6833      	ldr	r3, [r6, #0]
 8000b3c:	05d9      	lsls	r1, r3, #23
 8000b3e:	d518      	bpl.n	8000b72 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b40:	68eb      	ldr	r3, [r5, #12]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d126      	bne.n	8000b94 <HAL_RCC_OscConfig+0x218>
 8000b46:	6a23      	ldr	r3, [r4, #32]
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b4e:	f7ff fda9 	bl	80006a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b52:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b56:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b58:	6a23      	ldr	r3, [r4, #32]
 8000b5a:	079b      	lsls	r3, r3, #30
 8000b5c:	d53f      	bpl.n	8000bde <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	f43f af1d 	beq.w	800099e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b64:	69e3      	ldr	r3, [r4, #28]
 8000b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	61e3      	str	r3, [r4, #28]
 8000b6c:	e717      	b.n	800099e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000b6e:	2700      	movs	r7, #0
 8000b70:	e7e2      	b.n	8000b38 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b72:	6833      	ldr	r3, [r6, #0]
 8000b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b78:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b7a:	f7ff fd93 	bl	80006a4 <HAL_GetTick>
 8000b7e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b80:	6833      	ldr	r3, [r6, #0]
 8000b82:	05da      	lsls	r2, r3, #23
 8000b84:	d4dc      	bmi.n	8000b40 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b86:	f7ff fd8d 	bl	80006a4 <HAL_GetTick>
 8000b8a:	eba0 0008 	sub.w	r0, r0, r8
 8000b8e:	2864      	cmp	r0, #100	; 0x64
 8000b90:	d9f6      	bls.n	8000b80 <HAL_RCC_OscConfig+0x204>
 8000b92:	e735      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b94:	b9ab      	cbnz	r3, 8000bc2 <HAL_RCC_OscConfig+0x246>
 8000b96:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6223      	str	r3, [r4, #32]
 8000ba2:	6a23      	ldr	r3, [r4, #32]
 8000ba4:	f023 0304 	bic.w	r3, r3, #4
 8000ba8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000baa:	f7ff fd7b 	bl	80006a4 <HAL_GetTick>
 8000bae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb0:	6a23      	ldr	r3, [r4, #32]
 8000bb2:	0798      	lsls	r0, r3, #30
 8000bb4:	d5d3      	bpl.n	8000b5e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fd75 	bl	80006a4 <HAL_GetTick>
 8000bba:	1b80      	subs	r0, r0, r6
 8000bbc:	4540      	cmp	r0, r8
 8000bbe:	d9f7      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x234>
 8000bc0:	e71e      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	6a23      	ldr	r3, [r4, #32]
 8000bc6:	d103      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x254>
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6223      	str	r3, [r4, #32]
 8000bce:	e7ba      	b.n	8000b46 <HAL_RCC_OscConfig+0x1ca>
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	6223      	str	r3, [r4, #32]
 8000bd6:	6a23      	ldr	r3, [r4, #32]
 8000bd8:	f023 0304 	bic.w	r3, r3, #4
 8000bdc:	e7b6      	b.n	8000b4c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bde:	f7ff fd61 	bl	80006a4 <HAL_GetTick>
 8000be2:	eba0 0008 	sub.w	r0, r0, r8
 8000be6:	42b0      	cmp	r0, r6
 8000be8:	d9b6      	bls.n	8000b58 <HAL_RCC_OscConfig+0x1dc>
 8000bea:	e709      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	42420000 	.word	0x42420000
 8000bf4:	42420480 	.word	0x42420480
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c00:	4c22      	ldr	r4, [pc, #136]	; (8000c8c <HAL_RCC_OscConfig+0x310>)
 8000c02:	6863      	ldr	r3, [r4, #4]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	f43f aee2 	beq.w	80009d2 <HAL_RCC_OscConfig+0x56>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	4e1f      	ldr	r6, [pc, #124]	; (8000c90 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c12:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000c14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c16:	d12b      	bne.n	8000c70 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000c18:	f7ff fd44 	bl	80006a4 <HAL_GetTick>
 8000c1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	0199      	lsls	r1, r3, #6
 8000c22:	d41f      	bmi.n	8000c64 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c24:	6a2b      	ldr	r3, [r5, #32]
 8000c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2a:	d105      	bne.n	8000c38 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c2c:	6862      	ldr	r2, [r4, #4]
 8000c2e:	68a9      	ldr	r1, [r5, #8]
 8000c30:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000c34:	430a      	orrs	r2, r1
 8000c36:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c38:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c3a:	6862      	ldr	r2, [r4, #4]
 8000c3c:	430b      	orrs	r3, r1
 8000c3e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000c42:	4313      	orrs	r3, r2
 8000c44:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c46:	2301      	movs	r3, #1
 8000c48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c4a:	f7ff fd2b 	bl	80006a4 <HAL_GetTick>
 8000c4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	019a      	lsls	r2, r3, #6
 8000c54:	f53f aea7 	bmi.w	80009a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c58:	f7ff fd24 	bl	80006a4 <HAL_GetTick>
 8000c5c:	1b40      	subs	r0, r0, r5
 8000c5e:	2802      	cmp	r0, #2
 8000c60:	d9f6      	bls.n	8000c50 <HAL_RCC_OscConfig+0x2d4>
 8000c62:	e6cd      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c64:	f7ff fd1e 	bl	80006a4 <HAL_GetTick>
 8000c68:	1bc0      	subs	r0, r0, r7
 8000c6a:	2802      	cmp	r0, #2
 8000c6c:	d9d7      	bls.n	8000c1e <HAL_RCC_OscConfig+0x2a2>
 8000c6e:	e6c7      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000c70:	f7ff fd18 	bl	80006a4 <HAL_GetTick>
 8000c74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	019b      	lsls	r3, r3, #6
 8000c7a:	f57f ae94 	bpl.w	80009a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c7e:	f7ff fd11 	bl	80006a4 <HAL_GetTick>
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	2802      	cmp	r0, #2
 8000c86:	d9f6      	bls.n	8000c76 <HAL_RCC_OscConfig+0x2fa>
 8000c88:	e6ba      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	42420060 	.word	0x42420060

08000c94 <HAL_RCC_GetSysClockFreq>:
{
 8000c94:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8000c98:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c9a:	ac02      	add	r4, sp, #8
 8000c9c:	f103 0510 	add.w	r5, r3, #16
 8000ca0:	4622      	mov	r2, r4
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	6859      	ldr	r1, [r3, #4]
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	c203      	stmia	r2!, {r0, r1}
 8000caa:	42ab      	cmp	r3, r5
 8000cac:	4614      	mov	r4, r2
 8000cae:	d1f7      	bne.n	8000ca0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000cb6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000cb8:	4912      	ldr	r1, [pc, #72]	; (8000d04 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cba:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000cbe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000cc0:	f003 020c 	and.w	r2, r3, #12
 8000cc4:	2a08      	cmp	r2, #8
 8000cc6:	d118      	bne.n	8000cfa <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000cc8:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ccc:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cce:	bf48      	it	mi
 8000cd0:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000cd2:	a806      	add	r0, sp, #24
 8000cd4:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cd6:	bf48      	it	mi
 8000cd8:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000cdc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ce0:	bf41      	itttt	mi
 8000ce2:	aa06      	addmi	r2, sp, #24
 8000ce4:	189b      	addmi	r3, r3, r2
 8000ce6:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000cea:	4b07      	ldrmi	r3, [pc, #28]	; (8000d08 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000cec:	bf54      	ite	pl
 8000cee:	4b07      	ldrpl	r3, [pc, #28]	; (8000d0c <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000cf0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000cf4:	4358      	muls	r0, r3
}
 8000cf6:	b007      	add	sp, #28
 8000cf8:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8000cfa:	4803      	ldr	r0, [pc, #12]	; (8000d08 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000cfc:	e7fb      	b.n	8000cf6 <HAL_RCC_GetSysClockFreq+0x62>
 8000cfe:	bf00      	nop
 8000d00:	080014d8 	.word	0x080014d8
 8000d04:	40021000 	.word	0x40021000
 8000d08:	007a1200 	.word	0x007a1200
 8000d0c:	003d0900 	.word	0x003d0900

08000d10 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d10:	4a4d      	ldr	r2, [pc, #308]	; (8000e48 <HAL_RCC_ClockConfig+0x138>)
{
 8000d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d16:	6813      	ldr	r3, [r2, #0]
{
 8000d18:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	428b      	cmp	r3, r1
{
 8000d20:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d22:	d328      	bcc.n	8000d76 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d24:	682a      	ldr	r2, [r5, #0]
 8000d26:	0791      	lsls	r1, r2, #30
 8000d28:	d432      	bmi.n	8000d90 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d2a:	07d2      	lsls	r2, r2, #31
 8000d2c:	d438      	bmi.n	8000da0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d2e:	4a46      	ldr	r2, [pc, #280]	; (8000e48 <HAL_RCC_ClockConfig+0x138>)
 8000d30:	6813      	ldr	r3, [r2, #0]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	429e      	cmp	r6, r3
 8000d38:	d373      	bcc.n	8000e22 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3a:	682a      	ldr	r2, [r5, #0]
 8000d3c:	4c43      	ldr	r4, [pc, #268]	; (8000e4c <HAL_RCC_ClockConfig+0x13c>)
 8000d3e:	f012 0f04 	tst.w	r2, #4
 8000d42:	d179      	bne.n	8000e38 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d44:	0713      	lsls	r3, r2, #28
 8000d46:	d506      	bpl.n	8000d56 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d48:	6863      	ldr	r3, [r4, #4]
 8000d4a:	692a      	ldr	r2, [r5, #16]
 8000d4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d54:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d56:	f7ff ff9d 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 8000d5a:	6863      	ldr	r3, [r4, #4]
 8000d5c:	4a3c      	ldr	r2, [pc, #240]	; (8000e50 <HAL_RCC_ClockConfig+0x140>)
 8000d5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	40d8      	lsrs	r0, r3
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <HAL_RCC_ClockConfig+0x144>)
 8000d68:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff fc6c 	bl	8000648 <HAL_InitTick>
  return HAL_OK;
 8000d70:	2000      	movs	r0, #0
}
 8000d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	f023 0307 	bic.w	r3, r3, #7
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d80:	6813      	ldr	r3, [r2, #0]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	4299      	cmp	r1, r3
 8000d88:	d0cc      	beq.n	8000d24 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d90:	492e      	ldr	r1, [pc, #184]	; (8000e4c <HAL_RCC_ClockConfig+0x13c>)
 8000d92:	68a8      	ldr	r0, [r5, #8]
 8000d94:	684b      	ldr	r3, [r1, #4]
 8000d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d9a:	4303      	orrs	r3, r0
 8000d9c:	604b      	str	r3, [r1, #4]
 8000d9e:	e7c4      	b.n	8000d2a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da0:	686a      	ldr	r2, [r5, #4]
 8000da2:	4c2a      	ldr	r4, [pc, #168]	; (8000e4c <HAL_RCC_ClockConfig+0x13c>)
 8000da4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000da8:	d11c      	bne.n	8000de4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000daa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dae:	d0ec      	beq.n	8000d8a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000db0:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000db6:	f023 0303 	bic.w	r3, r3, #3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000dbe:	f7ff fc71 	bl	80006a4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dc2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000dc4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d114      	bne.n	8000df4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dca:	6863      	ldr	r3, [r4, #4]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b04      	cmp	r3, #4
 8000dd2:	d0ac      	beq.n	8000d2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dd4:	f7ff fc66 	bl	80006a4 <HAL_GetTick>
 8000dd8:	1bc0      	subs	r0, r0, r7
 8000dda:	4540      	cmp	r0, r8
 8000ddc:	d9f5      	bls.n	8000dca <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000dde:	2003      	movs	r0, #3
 8000de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000de4:	2a02      	cmp	r2, #2
 8000de6:	d102      	bne.n	8000dee <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000de8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dec:	e7df      	b.n	8000dae <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dee:	f013 0f02 	tst.w	r3, #2
 8000df2:	e7dc      	b.n	8000dae <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d10f      	bne.n	8000e18 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000df8:	6863      	ldr	r3, [r4, #4]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d095      	beq.n	8000d2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e02:	f7ff fc4f 	bl	80006a4 <HAL_GetTick>
 8000e06:	1bc0      	subs	r0, r0, r7
 8000e08:	4540      	cmp	r0, r8
 8000e0a:	d9f5      	bls.n	8000df8 <HAL_RCC_ClockConfig+0xe8>
 8000e0c:	e7e7      	b.n	8000dde <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e0e:	f7ff fc49 	bl	80006a4 <HAL_GetTick>
 8000e12:	1bc0      	subs	r0, r0, r7
 8000e14:	4540      	cmp	r0, r8
 8000e16:	d8e2      	bhi.n	8000dde <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e18:	6863      	ldr	r3, [r4, #4]
 8000e1a:	f013 0f0c 	tst.w	r3, #12
 8000e1e:	d1f6      	bne.n	8000e0e <HAL_RCC_ClockConfig+0xfe>
 8000e20:	e785      	b.n	8000d2e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e22:	6813      	ldr	r3, [r2, #0]
 8000e24:	f023 0307 	bic.w	r3, r3, #7
 8000e28:	4333      	orrs	r3, r6
 8000e2a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e2c:	6813      	ldr	r3, [r2, #0]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	429e      	cmp	r6, r3
 8000e34:	d1a9      	bne.n	8000d8a <HAL_RCC_ClockConfig+0x7a>
 8000e36:	e780      	b.n	8000d3a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e38:	6863      	ldr	r3, [r4, #4]
 8000e3a:	68e9      	ldr	r1, [r5, #12]
 8000e3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e40:	430b      	orrs	r3, r1
 8000e42:	6063      	str	r3, [r4, #4]
 8000e44:	e77e      	b.n	8000d44 <HAL_RCC_ClockConfig+0x34>
 8000e46:	bf00      	nop
 8000e48:	40022000 	.word	0x40022000
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	080014e8 	.word	0x080014e8
 8000e54:	20000000 	.word	0x20000000

08000e58 <HAL_RCC_GetHCLKFreq>:
}
 8000e58:	4b01      	ldr	r3, [pc, #4]	; (8000e60 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e5a:	6818      	ldr	r0, [r3, #0]
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000

08000e64 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000e6e:	5cd3      	ldrb	r3, [r2, r3]
 8000e70:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e72:	6810      	ldr	r0, [r2, #0]
}    
 8000e74:	40d8      	lsrs	r0, r3
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	080014f8 	.word	0x080014f8
 8000e80:	20000000 	.word	0x20000000

08000e84 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e92:	6810      	ldr	r0, [r2, #0]
} 
 8000e94:	40d8      	lsrs	r0, r3
 8000e96:	4770      	bx	lr
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	080014f8 	.word	0x080014f8
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ea8:	6805      	ldr	r5, [r0, #0]
 8000eaa:	68c2      	ldr	r2, [r0, #12]
 8000eac:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000eae:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000eb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000eb8:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000eba:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ebc:	430b      	orrs	r3, r1
 8000ebe:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000ec0:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000ec4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ec8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000ece:	696b      	ldr	r3, [r5, #20]
 8000ed0:	6982      	ldr	r2, [r0, #24]
 8000ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000eda:	4b40      	ldr	r3, [pc, #256]	; (8000fdc <UART_SetConfig+0x138>)
{
 8000edc:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000ede:	429d      	cmp	r5, r3
 8000ee0:	f04f 0419 	mov.w	r4, #25
 8000ee4:	d146      	bne.n	8000f74 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ee6:	f7ff ffcd 	bl	8000e84 <HAL_RCC_GetPCLK2Freq>
 8000eea:	fb04 f300 	mul.w	r3, r4, r0
 8000eee:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000ef2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ef6:	00b6      	lsls	r6, r6, #2
 8000ef8:	fbb3 f3f6 	udiv	r3, r3, r6
 8000efc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f00:	011e      	lsls	r6, r3, #4
 8000f02:	f7ff ffbf 	bl	8000e84 <HAL_RCC_GetPCLK2Freq>
 8000f06:	4360      	muls	r0, r4
 8000f08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f12:	f7ff ffb7 	bl	8000e84 <HAL_RCC_GetPCLK2Freq>
 8000f16:	4360      	muls	r0, r4
 8000f18:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f22:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f26:	fb08 7313 	mls	r3, r8, r3, r7
 8000f2a:	011b      	lsls	r3, r3, #4
 8000f2c:	3332      	adds	r3, #50	; 0x32
 8000f2e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f32:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f36:	f7ff ffa5 	bl	8000e84 <HAL_RCC_GetPCLK2Freq>
 8000f3a:	4360      	muls	r0, r4
 8000f3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	fbb0 faf2 	udiv	sl, r0, r2
 8000f46:	f7ff ff9d 	bl	8000e84 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f4a:	4360      	muls	r0, r4
 8000f4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f56:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f5a:	fb08 a313 	mls	r3, r8, r3, sl
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	3332      	adds	r3, #50	; 0x32
 8000f62:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	433b      	orrs	r3, r7
 8000f6c:	4433      	add	r3, r6
 8000f6e:	60ab      	str	r3, [r5, #8]
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f7ff ff76 	bl	8000e64 <HAL_RCC_GetPCLK1Freq>
 8000f78:	fb04 f300 	mul.w	r3, r4, r0
 8000f7c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000f80:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f84:	00b6      	lsls	r6, r6, #2
 8000f86:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f8a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f8e:	011e      	lsls	r6, r3, #4
 8000f90:	f7ff ff68 	bl	8000e64 <HAL_RCC_GetPCLK1Freq>
 8000f94:	4360      	muls	r0, r4
 8000f96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fbb0 f7f3 	udiv	r7, r0, r3
 8000fa0:	f7ff ff60 	bl	8000e64 <HAL_RCC_GetPCLK1Freq>
 8000fa4:	4360      	muls	r0, r4
 8000fa6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fb0:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fb4:	fb08 7313 	mls	r3, r8, r3, r7
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	3332      	adds	r3, #50	; 0x32
 8000fbc:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fc0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000fc4:	f7ff ff4e 	bl	8000e64 <HAL_RCC_GetPCLK1Freq>
 8000fc8:	4360      	muls	r0, r4
 8000fca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	fbb0 faf2 	udiv	sl, r0, r2
 8000fd4:	f7ff ff46 	bl	8000e64 <HAL_RCC_GetPCLK1Freq>
 8000fd8:	e7b7      	b.n	8000f4a <UART_SetConfig+0xa6>
 8000fda:	bf00      	nop
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	460e      	mov	r6, r1
 8000fe6:	4617      	mov	r7, r2
 8000fe8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000fea:	6821      	ldr	r1, [r4, #0]
 8000fec:	680b      	ldr	r3, [r1, #0]
 8000fee:	ea36 0303 	bics.w	r3, r6, r3
 8000ff2:	d101      	bne.n	8000ff8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000ff4:	2000      	movs	r0, #0
}
 8000ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ff8:	1c6b      	adds	r3, r5, #1
 8000ffa:	d0f7      	beq.n	8000fec <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ffc:	b995      	cbnz	r5, 8001024 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000ffe:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001000:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001008:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001012:	2320      	movs	r3, #32
 8001014:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001018:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800101c:	2300      	movs	r3, #0
 800101e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001024:	f7ff fb3e 	bl	80006a4 <HAL_GetTick>
 8001028:	1bc0      	subs	r0, r0, r7
 800102a:	4285      	cmp	r5, r0
 800102c:	d2dd      	bcs.n	8000fea <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800102e:	e7e6      	b.n	8000ffe <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001030 <HAL_UART_Init>:
{
 8001030:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001032:	4604      	mov	r4, r0
 8001034:	b340      	cbz	r0, 8001088 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001036:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800103a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800103e:	b91b      	cbnz	r3, 8001048 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001040:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001044:	f000 f98a 	bl	800135c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001048:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800104a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800104c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001050:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001052:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001058:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800105a:	f7ff ff23 	bl	8000ea4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800105e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001060:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001070:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001078:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800107a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800107c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800107e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001082:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001086:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001088:	2001      	movs	r0, #1
}
 800108a:	bd10      	pop	{r4, pc}

0800108c <HAL_UART_Transmit>:
{
 800108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001090:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001092:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001096:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001098:	2b20      	cmp	r3, #32
{
 800109a:	460d      	mov	r5, r1
 800109c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800109e:	d14e      	bne.n	800113e <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 80010a0:	2900      	cmp	r1, #0
 80010a2:	d049      	beq.n	8001138 <HAL_UART_Transmit+0xac>
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d047      	beq.n	8001138 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80010a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d046      	beq.n	800113e <HAL_UART_Transmit+0xb2>
 80010b0:	2301      	movs	r3, #1
 80010b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010ba:	2321      	movs	r3, #33	; 0x21
 80010bc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80010c0:	f7ff faf0 	bl	80006a4 <HAL_GetTick>
 80010c4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80010c6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80010ca:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80010ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b96b      	cbnz	r3, 80010f0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4632      	mov	r2, r6
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff ff80 	bl	8000fe0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80010e0:	b9a8      	cbnz	r0, 800110e <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80010e2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80010e4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80010e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80010ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80010f0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010f2:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80010f4:	3b01      	subs	r3, #1
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010fa:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010fc:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001102:	4620      	mov	r0, r4
 8001104:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001106:	d10e      	bne.n	8001126 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001108:	f7ff ff6a 	bl	8000fe0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800110c:	b110      	cbz	r0, 8001114 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
 8001110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001114:	882b      	ldrh	r3, [r5, #0]
 8001116:	6822      	ldr	r2, [r4, #0]
 8001118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800111c:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800111e:	6923      	ldr	r3, [r4, #16]
 8001120:	b943      	cbnz	r3, 8001134 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001122:	3502      	adds	r5, #2
 8001124:	e7d3      	b.n	80010ce <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001126:	f7ff ff5b 	bl	8000fe0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800112a:	2800      	cmp	r0, #0
 800112c:	d1ef      	bne.n	800110e <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	782a      	ldrb	r2, [r5, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	3501      	adds	r5, #1
 8001136:	e7ca      	b.n	80010ce <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001138:	2001      	movs	r0, #1
 800113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800113e:	2002      	movs	r0, #2
}
 8001140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001144 <flow>:

/* USER CODE BEGIN 0 */
unsigned int npuls = 0;
float fluxs = 0;

float flow(){
 8001144:	b510      	push	{r4, lr}
	fluxs = ((float)npuls)/7.5;
 8001146:	4c06      	ldr	r4, [pc, #24]	; (8001160 <flow+0x1c>)
 8001148:	6820      	ldr	r0, [r4, #0]
 800114a:	f7ff f8b5 	bl	80002b8 <__aeabi_ui2f>
 800114e:	4905      	ldr	r1, [pc, #20]	; (8001164 <flow+0x20>)
 8001150:	f7ff f9be 	bl	80004d0 <__aeabi_fdiv>
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <flow+0x24>)
 8001156:	6018      	str	r0, [r3, #0]
	npuls=0;
 8001158:	2300      	movs	r3, #0
 800115a:	6023      	str	r3, [r4, #0]
	return fluxs;
}
 800115c:	bd10      	pop	{r4, pc}
 800115e:	bf00      	nop
 8001160:	20000024 	.word	0x20000024
 8001164:	40f00000 	.word	0x40f00000
 8001168:	20000020 	.word	0x20000020

0800116c <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
{
 800116e:	b510      	push	{r4, lr}
 8001170:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001172:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001178:	2310      	movs	r3, #16
 800117a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800117c:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001180:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	f7ff fbfb 	bl	800097c <HAL_RCC_OscConfig>
 8001186:	4601      	mov	r1, r0
 8001188:	b100      	cbz	r0, 800118c <SystemClock_Config+0x20>
 800118a:	e7fe      	b.n	800118a <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800118e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001192:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001194:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001196:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800119a:	f7ff fdb9 	bl	8000d10 <HAL_RCC_ClockConfig>
 800119e:	4604      	mov	r4, r0
 80011a0:	b100      	cbz	r0, 80011a4 <SystemClock_Config+0x38>
 80011a2:	e7fe      	b.n	80011a2 <SystemClock_Config+0x36>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80011a4:	f7ff fe58 	bl	8000e58 <HAL_RCC_GetHCLKFreq>
 80011a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80011b0:	f7ff fad0 	bl	8000754 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011b4:	2004      	movs	r0, #4
 80011b6:	f7ff fae3 	bl	8000780 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80011ba:	4622      	mov	r2, r4
 80011bc:	4621      	mov	r1, r4
 80011be:	f04f 30ff 	mov.w	r0, #4294967295
 80011c2:	f7ff fa87 	bl	80006d4 <HAL_NVIC_SetPriority>
}
 80011c6:	b010      	add	sp, #64	; 0x40
 80011c8:	bd10      	pop	{r4, pc}
	...

080011cc <main>:
{
 80011cc:	b530      	push	{r4, r5, lr}
 80011ce:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80011d0:	f7ff fa4e 	bl	8000670 <HAL_Init>
  SystemClock_Config();
 80011d4:	f7ff ffca 	bl	800116c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d8:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <main+0xd8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011dc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011de:	4c32      	ldr	r4, [pc, #200]	; (80012a8 <main+0xdc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e0:	f042 0210 	orr.w	r2, r2, #16
 80011e4:	619a      	str	r2, [r3, #24]
 80011e6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	f002 0210 	and.w	r2, r2, #16
 80011ee:	9200      	str	r2, [sp, #0]
 80011f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	482d      	ldr	r0, [pc, #180]	; (80012ac <main+0xe0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f6:	f042 0220 	orr.w	r2, r2, #32
 80011fa:	619a      	str	r2, [r3, #24]
 80011fc:	699a      	ldr	r2, [r3, #24]
 80011fe:	f002 0220 	and.w	r2, r2, #32
 8001202:	9201      	str	r2, [sp, #4]
 8001204:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	699a      	ldr	r2, [r3, #24]
 8001208:	f042 0204 	orr.w	r2, r2, #4
 800120c:	619a      	str	r2, [r3, #24]
 800120e:	699a      	ldr	r2, [r3, #24]
 8001210:	f002 0204 	and.w	r2, r2, #4
 8001214:	9202      	str	r2, [sp, #8]
 8001216:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	699a      	ldr	r2, [r3, #24]
 800121a:	f042 0208 	orr.w	r2, r2, #8
 800121e:	619a      	str	r2, [r3, #24]
 8001220:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001222:	9405      	str	r4, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	9303      	str	r3, [sp, #12]
 800122a:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800122c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001232:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f7ff fab6 	bl	80007a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001238:	2350      	movs	r3, #80	; 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	a904      	add	r1, sp, #16
 800123c:	481c      	ldr	r0, [pc, #112]	; (80012b0 <main+0xe4>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800123e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001240:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f7ff faae 	bl	80007a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001248:	462a      	mov	r2, r5
 800124a:	4629      	mov	r1, r5
 800124c:	200a      	movs	r0, #10
 800124e:	f7ff fa41 	bl	80006d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001252:	200a      	movs	r0, #10
 8001254:	f7ff fa72 	bl	800073c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001258:	462a      	mov	r2, r5
 800125a:	4629      	mov	r1, r5
 800125c:	2017      	movs	r0, #23
 800125e:	f7ff fa39 	bl	80006d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001262:	2017      	movs	r0, #23
 8001264:	f7ff fa6a 	bl	800073c <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 9600;
 8001268:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 800126c:	4c11      	ldr	r4, [pc, #68]	; (80012b4 <main+0xe8>)
  huart1.Init.BaudRate = 9600;
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <main+0xec>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001270:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 9600;
 8001272:	e884 000c 	stmia.w	r4, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001276:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001278:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800127a:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127c:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800127e:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001280:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001282:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001284:	f7ff fed4 	bl	8001030 <HAL_UART_Init>
 8001288:	b100      	cbz	r0, 800128c <main+0xc0>
 800128a:	e7fe      	b.n	800128a <main+0xbe>
	 float fluxo = flow();
 800128c:	f7ff ff5a 	bl	8001144 <flow>
	 uint8_t buffer = (uint8_t)fluxo;
 8001290:	f7ff f9ba 	bl	8000608 <__aeabi_f2uiz>
	 HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 100);
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	b2c1      	uxtb	r1, r0
 8001298:	2201      	movs	r2, #1
 800129a:	4620      	mov	r0, r4
 800129c:	f7ff fef6 	bl	800108c <HAL_UART_Transmit>
 80012a0:	e7f4      	b.n	800128c <main+0xc0>
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	10110000 	.word	0x10110000
 80012ac:	40011000 	.word	0x40011000
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	2000002c 	.word	0x2000002c
 80012b8:	40013800 	.word	0x40013800

080012bc <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */


//Iterrupt porta pb6 e pb4
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	npuls++;
 80012bc:	4a02      	ldr	r2, [pc, #8]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc>)
 80012be:	6813      	ldr	r3, [r2, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000024 	.word	0x20000024

080012cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <HAL_MspInit+0x88>)
{
 80012ce:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d0:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d2:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d4:	f042 0201 	orr.w	r2, r2, #1
 80012d8:	619a      	str	r2, [r3, #24]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	f7ff f9e4 	bl	80006b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	f06f 000b 	mvn.w	r0, #11
 80012ee:	4611      	mov	r1, r2
 80012f0:	f7ff f9f0 	bl	80006d4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f06f 000a 	mvn.w	r0, #10
 80012fa:	4611      	mov	r1, r2
 80012fc:	f7ff f9ea 	bl	80006d4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	f06f 0009 	mvn.w	r0, #9
 8001306:	4611      	mov	r1, r2
 8001308:	f7ff f9e4 	bl	80006d4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	f06f 0004 	mvn.w	r0, #4
 8001312:	4611      	mov	r1, r2
 8001314:	f7ff f9de 	bl	80006d4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	f06f 0003 	mvn.w	r0, #3
 800131e:	4611      	mov	r1, r2
 8001320:	f7ff f9d8 	bl	80006d4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	f06f 0001 	mvn.w	r0, #1
 800132a:	4611      	mov	r1, r2
 800132c:	f7ff f9d2 	bl	80006d4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
 8001336:	4611      	mov	r1, r2
 8001338:	f7ff f9cc 	bl	80006d4 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x8c>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800134c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	b003      	add	sp, #12
 8001350:	f85d fb04 	ldr.w	pc, [sp], #4
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000

0800135c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800135e:	6802      	ldr	r2, [r0, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_UART_MspInit+0x50>)
 8001362:	429a      	cmp	r2, r3
 8001364:	d11f      	bne.n	80013a6 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001366:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800136a:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800136e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001372:	619a      	str	r2, [r3, #24]
 8001374:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001384:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f7ff fa09 	bl	80007a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	a902      	add	r1, sp, #8
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f7ff f9ff 	bl	80007a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013a6:	b007      	add	sp, #28
 80013a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80013ac:	40013800 	.word	0x40013800
 80013b0:	40010800 	.word	0x40010800

080013b4 <NMI_Handler>:
 80013b4:	4770      	bx	lr

080013b6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80013b6:	e7fe      	b.n	80013b6 <HardFault_Handler>

080013b8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler>

080013ba <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler>

080013bc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler>

080013be <SVC_Handler>:
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80013c2:	4770      	bx	lr

080013c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80013c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f7ff f965 	bl	8000694 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80013ce:	f7ff b9e4 	b.w	800079a <HAL_SYSTICK_IRQHandler>

080013d2 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80013d2:	2010      	movs	r0, #16
 80013d4:	f7ff bac6 	b.w	8000964 <HAL_GPIO_EXTI_IRQHandler>

080013d8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80013d8:	2040      	movs	r0, #64	; 0x40
 80013da:	f7ff bac3 	b.w	8000964 <HAL_GPIO_EXTI_IRQHandler>
	...

080013e0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <SystemInit+0x40>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	f042 0201 	orr.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80013ea:	6859      	ldr	r1, [r3, #4]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <SystemInit+0x44>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80013f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013fc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001404:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800140c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800140e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001412:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001414:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <SystemInit+0x48>)
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	f8ff0000 	.word	0xf8ff0000
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800142c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800142e:	e003      	b.n	8001438 <LoopCopyDataInit>

08001430 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001432:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001434:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001436:	3104      	adds	r1, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800143c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800143e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001440:	d3f6      	bcc.n	8001430 <CopyDataInit>
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001444:	e002      	b.n	800144c <LoopFillZerobss>

08001446 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001448:	f842 3b04 	str.w	r3, [r2], #4

0800144c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001450:	d3f9      	bcc.n	8001446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001452:	f7ff ffc5 	bl	80013e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f000 f80f 	bl	8001478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff feb7 	bl	80011cc <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r3, =_sidata
 8001460:	08001508 	.word	0x08001508
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001468:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 800146c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001470:	2000006c 	.word	0x2000006c

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <__libc_init_array>:
 8001478:	b570      	push	{r4, r5, r6, lr}
 800147a:	2500      	movs	r5, #0
 800147c:	4e0c      	ldr	r6, [pc, #48]	; (80014b0 <__libc_init_array+0x38>)
 800147e:	4c0d      	ldr	r4, [pc, #52]	; (80014b4 <__libc_init_array+0x3c>)
 8001480:	1ba4      	subs	r4, r4, r6
 8001482:	10a4      	asrs	r4, r4, #2
 8001484:	42a5      	cmp	r5, r4
 8001486:	d109      	bne.n	800149c <__libc_init_array+0x24>
 8001488:	f000 f81a 	bl	80014c0 <_init>
 800148c:	2500      	movs	r5, #0
 800148e:	4e0a      	ldr	r6, [pc, #40]	; (80014b8 <__libc_init_array+0x40>)
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <__libc_init_array+0x44>)
 8001492:	1ba4      	subs	r4, r4, r6
 8001494:	10a4      	asrs	r4, r4, #2
 8001496:	42a5      	cmp	r5, r4
 8001498:	d105      	bne.n	80014a6 <__libc_init_array+0x2e>
 800149a:	bd70      	pop	{r4, r5, r6, pc}
 800149c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014a0:	4798      	blx	r3
 80014a2:	3501      	adds	r5, #1
 80014a4:	e7ee      	b.n	8001484 <__libc_init_array+0xc>
 80014a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014aa:	4798      	blx	r3
 80014ac:	3501      	adds	r5, #1
 80014ae:	e7f2      	b.n	8001496 <__libc_init_array+0x1e>
 80014b0:	08001500 	.word	0x08001500
 80014b4:	08001500 	.word	0x08001500
 80014b8:	08001500 	.word	0x08001500
 80014bc:	08001504 	.word	0x08001504

080014c0 <_init>:
 80014c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014c2:	bf00      	nop
 80014c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014c6:	bc08      	pop	{r3}
 80014c8:	469e      	mov	lr, r3
 80014ca:	4770      	bx	lr

080014cc <_fini>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	bf00      	nop
 80014d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d2:	bc08      	pop	{r3}
 80014d4:	469e      	mov	lr, r3
 80014d6:	4770      	bx	lr
