
HERMES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001b24  08001b24  00011b24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b8c  08001b8c  00011b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b90  08001b90  00011b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08001b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  20000068  08001bfc  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000dc  08001bfc  000200dc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b5cd  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c32  00000000  00000000  0002b65e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002760  00000000  00000000  0002d290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000538  00000000  00000000  0002f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000668  00000000  00000000  0002ff28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000333a  00000000  00000000  00030590  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000203b  00000000  00000000  000338ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00035905  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000107c  00000000  00000000  00035984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b0c 	.word	0x08001b0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08001b0c 	.word	0x08001b0c

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <HAL_InitTick+0x24>)
{
 800014e:	b510      	push	{r4, lr}
 8000150:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f87c 	bl	8000258 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f836 	bl	80001d8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	20000000 	.word	0x20000000

08000174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
{
 8000176:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 f817 	bl	80001b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 800018c:	f000 ff7a 	bl	8001084 <HAL_MspInit>
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000094 	.word	0x20000094

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000094 	.word	0x20000094

080001b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001b4:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001b6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001b8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001c2:	041b      	lsls	r3, r3, #16
 80001c4:	0c1b      	lsrs	r3, r3, #16
 80001c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001d0:	60d3      	str	r3, [r2, #12]
 80001d2:	4770      	bx	lr
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001da:	b530      	push	{r4, r5, lr}
 80001dc:	68dc      	ldr	r4, [r3, #12]
 80001de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001e8:	2b04      	cmp	r3, #4
 80001ea:	bf28      	it	cs
 80001ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001f4:	bf98      	it	ls
 80001f6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f8:	fa05 f303 	lsl.w	r3, r5, r3
 80001fc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000200:	bf88      	it	hi
 8000202:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000204:	4019      	ands	r1, r3
 8000206:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000208:	fa05 f404 	lsl.w	r4, r5, r4
 800020c:	3c01      	subs	r4, #1
 800020e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000210:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000212:	ea42 0201 	orr.w	r2, r2, r1
 8000216:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021a:	bfaf      	iteee	ge
 800021c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000220:	4b06      	ldrlt	r3, [pc, #24]	; (800023c <HAL_NVIC_SetPriority+0x64>)
 8000222:	f000 000f 	andlt.w	r0, r0, #15
 8000226:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000228:	bfa5      	ittet	ge
 800022a:	b2d2      	uxtbge	r2, r2
 800022c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000230:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000232:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000236:	bd30      	pop	{r4, r5, pc}
 8000238:	e000ed00 	.word	0xe000ed00
 800023c:	e000ed14 	.word	0xe000ed14

08000240 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000240:	2301      	movs	r3, #1
 8000242:	0942      	lsrs	r2, r0, #5
 8000244:	f000 001f 	and.w	r0, r0, #31
 8000248:	fa03 f000 	lsl.w	r0, r3, r0
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_NVIC_EnableIRQ+0x14>)
 800024e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100

08000258 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000258:	3801      	subs	r0, #1
 800025a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800025e:	d20a      	bcs.n	8000276 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	4a06      	ldr	r2, [pc, #24]	; (8000280 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000266:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800026c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000270:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000276:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	e000e010 	.word	0xe000e010
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000286:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	bf0c      	ite	eq
 800028c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000290:	f022 0204 	bicne.w	r2, r2, #4
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	4770      	bx	lr
 8000298:	e000e010 	.word	0xe000e010

0800029c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800029c:	4770      	bx	lr

0800029e <HAL_SYSTICK_IRQHandler>:
{
 800029e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002a0:	f7ff fffc 	bl	800029c <HAL_SYSTICK_Callback>
 80002a4:	bd08      	pop	{r3, pc}
	...

080002a8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002a8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002ac:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d003      	beq.n	80002ba <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002b2:	2304      	movs	r3, #4
 80002b4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002b6:	2001      	movs	r0, #1
 80002b8:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002ba:	6803      	ldr	r3, [r0, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	f022 020e 	bic.w	r2, r2, #14
 80002c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	f022 0201 	bic.w	r2, r2, #1
 80002ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <HAL_DMA_Abort_IT+0x88>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d01f      	beq.n	8000312 <HAL_DMA_Abort_IT+0x6a>
 80002d2:	3214      	adds	r2, #20
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d01e      	beq.n	8000316 <HAL_DMA_Abort_IT+0x6e>
 80002d8:	3214      	adds	r2, #20
 80002da:	4293      	cmp	r3, r2
 80002dc:	d01d      	beq.n	800031a <HAL_DMA_Abort_IT+0x72>
 80002de:	3214      	adds	r2, #20
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d01d      	beq.n	8000320 <HAL_DMA_Abort_IT+0x78>
 80002e4:	3214      	adds	r2, #20
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d01d      	beq.n	8000326 <HAL_DMA_Abort_IT+0x7e>
 80002ea:	3214      	adds	r2, #20
 80002ec:	4293      	cmp	r3, r2
 80002ee:	bf0c      	ite	eq
 80002f0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80002f4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80002f8:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80002fa:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002fc:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80002fe:	2301      	movs	r3, #1
 8000300:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000304:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000306:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800030a:	b17b      	cbz	r3, 800032c <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 800030c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800030e:	4620      	mov	r0, r4
 8000310:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000312:	2301      	movs	r3, #1
 8000314:	e7f0      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
 8000316:	2310      	movs	r3, #16
 8000318:	e7ee      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
 800031a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800031e:	e7eb      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
 8000320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000324:	e7e8      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
 8000326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032a:	e7e5      	b.n	80002f8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800032c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800032e:	bd10      	pop	{r4, pc}
 8000330:	40020008 	.word	0x40020008
 8000334:	40020000 	.word	0x40020000

08000338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800033c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800033e:	4616      	mov	r6, r2
 8000340:	4b65      	ldr	r3, [pc, #404]	; (80004d8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000342:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004e8 <HAL_GPIO_Init+0x1b0>
 8000346:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80004ec <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800034a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800034e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000350:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000354:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000358:	45a0      	cmp	r8, r4
 800035a:	d17f      	bne.n	800045c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800035c:	684d      	ldr	r5, [r1, #4]
 800035e:	2d12      	cmp	r5, #18
 8000360:	f000 80af 	beq.w	80004c2 <HAL_GPIO_Init+0x18a>
 8000364:	f200 8088 	bhi.w	8000478 <HAL_GPIO_Init+0x140>
 8000368:	2d02      	cmp	r5, #2
 800036a:	f000 80a7 	beq.w	80004bc <HAL_GPIO_Init+0x184>
 800036e:	d87c      	bhi.n	800046a <HAL_GPIO_Init+0x132>
 8000370:	2d00      	cmp	r5, #0
 8000372:	f000 808e 	beq.w	8000492 <HAL_GPIO_Init+0x15a>
 8000376:	2d01      	cmp	r5, #1
 8000378:	f000 809e 	beq.w	80004b8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800037c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000380:	2cff      	cmp	r4, #255	; 0xff
 8000382:	bf93      	iteet	ls
 8000384:	4682      	movls	sl, r0
 8000386:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800038a:	3d08      	subhi	r5, #8
 800038c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000390:	bf92      	itee	ls
 8000392:	00b5      	lslls	r5, r6, #2
 8000394:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000398:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800039a:	fa09 f805 	lsl.w	r8, r9, r5
 800039e:	ea2b 0808 	bic.w	r8, fp, r8
 80003a2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003a6:	bf88      	it	hi
 80003a8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003ac:	ea48 0505 	orr.w	r5, r8, r5
 80003b0:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003b4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003b8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003bc:	d04e      	beq.n	800045c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003be:	4d47      	ldr	r5, [pc, #284]	; (80004dc <HAL_GPIO_Init+0x1a4>)
 80003c0:	4f46      	ldr	r7, [pc, #280]	; (80004dc <HAL_GPIO_Init+0x1a4>)
 80003c2:	69ad      	ldr	r5, [r5, #24]
 80003c4:	f026 0803 	bic.w	r8, r6, #3
 80003c8:	f045 0501 	orr.w	r5, r5, #1
 80003cc:	61bd      	str	r5, [r7, #24]
 80003ce:	69bd      	ldr	r5, [r7, #24]
 80003d0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003d4:	f005 0501 	and.w	r5, r5, #1
 80003d8:	9501      	str	r5, [sp, #4]
 80003da:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003de:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003ec:	fa09 f90b 	lsl.w	r9, r9, fp
 80003f0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003f4:	4d3a      	ldr	r5, [pc, #232]	; (80004e0 <HAL_GPIO_Init+0x1a8>)
 80003f6:	42a8      	cmp	r0, r5
 80003f8:	d068      	beq.n	80004cc <HAL_GPIO_Init+0x194>
 80003fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003fe:	42a8      	cmp	r0, r5
 8000400:	d066      	beq.n	80004d0 <HAL_GPIO_Init+0x198>
 8000402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000406:	42a8      	cmp	r0, r5
 8000408:	d064      	beq.n	80004d4 <HAL_GPIO_Init+0x19c>
 800040a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800040e:	42a8      	cmp	r0, r5
 8000410:	bf0c      	ite	eq
 8000412:	2503      	moveq	r5, #3
 8000414:	2504      	movne	r5, #4
 8000416:	fa05 f50b 	lsl.w	r5, r5, fp
 800041a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800041e:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000422:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000424:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000428:	bf14      	ite	ne
 800042a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800042c:	43a5      	biceq	r5, r4
 800042e:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000430:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000432:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8000436:	bf14      	ite	ne
 8000438:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800043a:	43a5      	biceq	r5, r4
 800043c:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800043e:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000440:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000444:	bf14      	ite	ne
 8000446:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000448:	43a5      	biceq	r5, r4
 800044a:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800044c:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800044e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000452:	bf14      	ite	ne
 8000454:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000456:	ea25 0404 	biceq.w	r4, r5, r4
 800045a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800045c:	3601      	adds	r6, #1
 800045e:	2e10      	cmp	r6, #16
 8000460:	f47f af73 	bne.w	800034a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000464:	b003      	add	sp, #12
 8000466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800046a:	2d03      	cmp	r5, #3
 800046c:	d022      	beq.n	80004b4 <HAL_GPIO_Init+0x17c>
 800046e:	2d11      	cmp	r5, #17
 8000470:	d184      	bne.n	800037c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000472:	68ca      	ldr	r2, [r1, #12]
 8000474:	3204      	adds	r2, #4
          break;
 8000476:	e781      	b.n	800037c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000478:	4f1a      	ldr	r7, [pc, #104]	; (80004e4 <HAL_GPIO_Init+0x1ac>)
 800047a:	42bd      	cmp	r5, r7
 800047c:	d009      	beq.n	8000492 <HAL_GPIO_Init+0x15a>
 800047e:	d812      	bhi.n	80004a6 <HAL_GPIO_Init+0x16e>
 8000480:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80004f0 <HAL_GPIO_Init+0x1b8>
 8000484:	454d      	cmp	r5, r9
 8000486:	d004      	beq.n	8000492 <HAL_GPIO_Init+0x15a>
 8000488:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800048c:	454d      	cmp	r5, r9
 800048e:	f47f af75 	bne.w	800037c <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000492:	688a      	ldr	r2, [r1, #8]
 8000494:	b1c2      	cbz	r2, 80004c8 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000496:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000498:	bf0c      	ite	eq
 800049a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800049e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004a2:	2208      	movs	r2, #8
 80004a4:	e76a      	b.n	800037c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004a6:	4575      	cmp	r5, lr
 80004a8:	d0f3      	beq.n	8000492 <HAL_GPIO_Init+0x15a>
 80004aa:	4565      	cmp	r5, ip
 80004ac:	d0f1      	beq.n	8000492 <HAL_GPIO_Init+0x15a>
 80004ae:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80004f4 <HAL_GPIO_Init+0x1bc>
 80004b2:	e7eb      	b.n	800048c <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004b4:	2200      	movs	r2, #0
 80004b6:	e761      	b.n	800037c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004b8:	68ca      	ldr	r2, [r1, #12]
          break;
 80004ba:	e75f      	b.n	800037c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004bc:	68ca      	ldr	r2, [r1, #12]
 80004be:	3208      	adds	r2, #8
          break;
 80004c0:	e75c      	b.n	800037c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c2:	68ca      	ldr	r2, [r1, #12]
 80004c4:	320c      	adds	r2, #12
          break;
 80004c6:	e759      	b.n	800037c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004c8:	2204      	movs	r2, #4
 80004ca:	e757      	b.n	800037c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004cc:	2500      	movs	r5, #0
 80004ce:	e7a2      	b.n	8000416 <HAL_GPIO_Init+0xde>
 80004d0:	2501      	movs	r5, #1
 80004d2:	e7a0      	b.n	8000416 <HAL_GPIO_Init+0xde>
 80004d4:	2502      	movs	r5, #2
 80004d6:	e79e      	b.n	8000416 <HAL_GPIO_Init+0xde>
 80004d8:	40010400 	.word	0x40010400
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010800 	.word	0x40010800
 80004e4:	10210000 	.word	0x10210000
 80004e8:	10310000 	.word	0x10310000
 80004ec:	10320000 	.word	0x10320000
 80004f0:	10110000 	.word	0x10110000
 80004f4:	10220000 	.word	0x10220000

080004f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004f8:	b10a      	cbz	r2, 80004fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80004fa:	6101      	str	r1, [r0, #16]
 80004fc:	4770      	bx	lr
 80004fe:	0409      	lsls	r1, r1, #16
 8000500:	e7fb      	b.n	80004fa <HAL_GPIO_WritePin+0x2>
	...

08000504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000504:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000506:	4b04      	ldr	r3, [pc, #16]	; (8000518 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000508:	6959      	ldr	r1, [r3, #20]
 800050a:	4201      	tst	r1, r0
 800050c:	d002      	beq.n	8000514 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800050e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000510:	f000 fdb0 	bl	8001074 <HAL_GPIO_EXTI_Callback>
 8000514:	bd08      	pop	{r3, pc}
 8000516:	bf00      	nop
 8000518:	40010400 	.word	0x40010400

0800051c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800051c:	6803      	ldr	r3, [r0, #0]
{
 800051e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000522:	07db      	lsls	r3, r3, #31
{
 8000524:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000526:	d410      	bmi.n	800054a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000528:	682b      	ldr	r3, [r5, #0]
 800052a:	079f      	lsls	r7, r3, #30
 800052c:	d45e      	bmi.n	80005ec <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800052e:	682b      	ldr	r3, [r5, #0]
 8000530:	0719      	lsls	r1, r3, #28
 8000532:	f100 8095 	bmi.w	8000660 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000536:	682b      	ldr	r3, [r5, #0]
 8000538:	075a      	lsls	r2, r3, #29
 800053a:	f100 80bf 	bmi.w	80006bc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800053e:	69ea      	ldr	r2, [r5, #28]
 8000540:	2a00      	cmp	r2, #0
 8000542:	f040 812d 	bne.w	80007a0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000546:	2000      	movs	r0, #0
 8000548:	e014      	b.n	8000574 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800054a:	4c90      	ldr	r4, [pc, #576]	; (800078c <HAL_RCC_OscConfig+0x270>)
 800054c:	6863      	ldr	r3, [r4, #4]
 800054e:	f003 030c 	and.w	r3, r3, #12
 8000552:	2b04      	cmp	r3, #4
 8000554:	d007      	beq.n	8000566 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000556:	6863      	ldr	r3, [r4, #4]
 8000558:	f003 030c 	and.w	r3, r3, #12
 800055c:	2b08      	cmp	r3, #8
 800055e:	d10c      	bne.n	800057a <HAL_RCC_OscConfig+0x5e>
 8000560:	6863      	ldr	r3, [r4, #4]
 8000562:	03de      	lsls	r6, r3, #15
 8000564:	d509      	bpl.n	800057a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	039c      	lsls	r4, r3, #14
 800056a:	d5dd      	bpl.n	8000528 <HAL_RCC_OscConfig+0xc>
 800056c:	686b      	ldr	r3, [r5, #4]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1da      	bne.n	8000528 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000572:	2001      	movs	r0, #1
}
 8000574:	b002      	add	sp, #8
 8000576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057a:	686b      	ldr	r3, [r5, #4]
 800057c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000580:	d110      	bne.n	80005a4 <HAL_RCC_OscConfig+0x88>
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000588:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800058a:	f7ff fe0d 	bl	80001a8 <HAL_GetTick>
 800058e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	0398      	lsls	r0, r3, #14
 8000594:	d4c8      	bmi.n	8000528 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000596:	f7ff fe07 	bl	80001a8 <HAL_GetTick>
 800059a:	1b80      	subs	r0, r0, r6
 800059c:	2864      	cmp	r0, #100	; 0x64
 800059e:	d9f7      	bls.n	8000590 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80005a0:	2003      	movs	r0, #3
 80005a2:	e7e7      	b.n	8000574 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a4:	b99b      	cbnz	r3, 80005ce <HAL_RCC_OscConfig+0xb2>
 80005a6:	6823      	ldr	r3, [r4, #0]
 80005a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ac:	6023      	str	r3, [r4, #0]
 80005ae:	6823      	ldr	r3, [r4, #0]
 80005b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005b4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005b6:	f7ff fdf7 	bl	80001a8 <HAL_GetTick>
 80005ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	0399      	lsls	r1, r3, #14
 80005c0:	d5b2      	bpl.n	8000528 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005c2:	f7ff fdf1 	bl	80001a8 <HAL_GetTick>
 80005c6:	1b80      	subs	r0, r0, r6
 80005c8:	2864      	cmp	r0, #100	; 0x64
 80005ca:	d9f7      	bls.n	80005bc <HAL_RCC_OscConfig+0xa0>
 80005cc:	e7e8      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005d2:	6823      	ldr	r3, [r4, #0]
 80005d4:	d103      	bne.n	80005de <HAL_RCC_OscConfig+0xc2>
 80005d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005da:	6023      	str	r3, [r4, #0]
 80005dc:	e7d1      	b.n	8000582 <HAL_RCC_OscConfig+0x66>
 80005de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005e2:	6023      	str	r3, [r4, #0]
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ea:	e7cd      	b.n	8000588 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005ec:	4c67      	ldr	r4, [pc, #412]	; (800078c <HAL_RCC_OscConfig+0x270>)
 80005ee:	6863      	ldr	r3, [r4, #4]
 80005f0:	f013 0f0c 	tst.w	r3, #12
 80005f4:	d007      	beq.n	8000606 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005f6:	6863      	ldr	r3, [r4, #4]
 80005f8:	f003 030c 	and.w	r3, r3, #12
 80005fc:	2b08      	cmp	r3, #8
 80005fe:	d110      	bne.n	8000622 <HAL_RCC_OscConfig+0x106>
 8000600:	6863      	ldr	r3, [r4, #4]
 8000602:	03da      	lsls	r2, r3, #15
 8000604:	d40d      	bmi.n	8000622 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	079b      	lsls	r3, r3, #30
 800060a:	d502      	bpl.n	8000612 <HAL_RCC_OscConfig+0xf6>
 800060c:	692b      	ldr	r3, [r5, #16]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d1af      	bne.n	8000572 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000612:	6823      	ldr	r3, [r4, #0]
 8000614:	696a      	ldr	r2, [r5, #20]
 8000616:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800061a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800061e:	6023      	str	r3, [r4, #0]
 8000620:	e785      	b.n	800052e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000622:	692a      	ldr	r2, [r5, #16]
 8000624:	4b5a      	ldr	r3, [pc, #360]	; (8000790 <HAL_RCC_OscConfig+0x274>)
 8000626:	b16a      	cbz	r2, 8000644 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000628:	2201      	movs	r2, #1
 800062a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800062c:	f7ff fdbc 	bl	80001a8 <HAL_GetTick>
 8000630:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	079f      	lsls	r7, r3, #30
 8000636:	d4ec      	bmi.n	8000612 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000638:	f7ff fdb6 	bl	80001a8 <HAL_GetTick>
 800063c:	1b80      	subs	r0, r0, r6
 800063e:	2802      	cmp	r0, #2
 8000640:	d9f7      	bls.n	8000632 <HAL_RCC_OscConfig+0x116>
 8000642:	e7ad      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000644:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000646:	f7ff fdaf 	bl	80001a8 <HAL_GetTick>
 800064a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	0798      	lsls	r0, r3, #30
 8000650:	f57f af6d 	bpl.w	800052e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000654:	f7ff fda8 	bl	80001a8 <HAL_GetTick>
 8000658:	1b80      	subs	r0, r0, r6
 800065a:	2802      	cmp	r0, #2
 800065c:	d9f6      	bls.n	800064c <HAL_RCC_OscConfig+0x130>
 800065e:	e79f      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000660:	69aa      	ldr	r2, [r5, #24]
 8000662:	4c4a      	ldr	r4, [pc, #296]	; (800078c <HAL_RCC_OscConfig+0x270>)
 8000664:	4b4b      	ldr	r3, [pc, #300]	; (8000794 <HAL_RCC_OscConfig+0x278>)
 8000666:	b1da      	cbz	r2, 80006a0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800066c:	f7ff fd9c 	bl	80001a8 <HAL_GetTick>
 8000670:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000674:	079b      	lsls	r3, r3, #30
 8000676:	d50d      	bpl.n	8000694 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000678:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800067c:	4b46      	ldr	r3, [pc, #280]	; (8000798 <HAL_RCC_OscConfig+0x27c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	fbb3 f3f2 	udiv	r3, r3, r2
 8000684:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000686:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000688:	9b01      	ldr	r3, [sp, #4]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f9      	bne.n	8000686 <HAL_RCC_OscConfig+0x16a>
 8000692:	e750      	b.n	8000536 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000694:	f7ff fd88 	bl	80001a8 <HAL_GetTick>
 8000698:	1b80      	subs	r0, r0, r6
 800069a:	2802      	cmp	r0, #2
 800069c:	d9e9      	bls.n	8000672 <HAL_RCC_OscConfig+0x156>
 800069e:	e77f      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80006a0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006a2:	f7ff fd81 	bl	80001a8 <HAL_GetTick>
 80006a6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006aa:	079f      	lsls	r7, r3, #30
 80006ac:	f57f af43 	bpl.w	8000536 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006b0:	f7ff fd7a 	bl	80001a8 <HAL_GetTick>
 80006b4:	1b80      	subs	r0, r0, r6
 80006b6:	2802      	cmp	r0, #2
 80006b8:	d9f6      	bls.n	80006a8 <HAL_RCC_OscConfig+0x18c>
 80006ba:	e771      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006bc:	4c33      	ldr	r4, [pc, #204]	; (800078c <HAL_RCC_OscConfig+0x270>)
 80006be:	69e3      	ldr	r3, [r4, #28]
 80006c0:	00d8      	lsls	r0, r3, #3
 80006c2:	d424      	bmi.n	800070e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80006c4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	69e3      	ldr	r3, [r4, #28]
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006cc:	61e3      	str	r3, [r4, #28]
 80006ce:	69e3      	ldr	r3, [r4, #28]
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006d8:	4e30      	ldr	r6, [pc, #192]	; (800079c <HAL_RCC_OscConfig+0x280>)
 80006da:	6833      	ldr	r3, [r6, #0]
 80006dc:	05d9      	lsls	r1, r3, #23
 80006de:	d518      	bpl.n	8000712 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e0:	68eb      	ldr	r3, [r5, #12]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d126      	bne.n	8000734 <HAL_RCC_OscConfig+0x218>
 80006e6:	6a23      	ldr	r3, [r4, #32]
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ee:	f7ff fd5b 	bl	80001a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006f2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80006f6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006f8:	6a23      	ldr	r3, [r4, #32]
 80006fa:	079b      	lsls	r3, r3, #30
 80006fc:	d53f      	bpl.n	800077e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80006fe:	2f00      	cmp	r7, #0
 8000700:	f43f af1d 	beq.w	800053e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000704:	69e3      	ldr	r3, [r4, #28]
 8000706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800070a:	61e3      	str	r3, [r4, #28]
 800070c:	e717      	b.n	800053e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800070e:	2700      	movs	r7, #0
 8000710:	e7e2      	b.n	80006d8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000712:	6833      	ldr	r3, [r6, #0]
 8000714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000718:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800071a:	f7ff fd45 	bl	80001a8 <HAL_GetTick>
 800071e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000720:	6833      	ldr	r3, [r6, #0]
 8000722:	05da      	lsls	r2, r3, #23
 8000724:	d4dc      	bmi.n	80006e0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000726:	f7ff fd3f 	bl	80001a8 <HAL_GetTick>
 800072a:	eba0 0008 	sub.w	r0, r0, r8
 800072e:	2864      	cmp	r0, #100	; 0x64
 8000730:	d9f6      	bls.n	8000720 <HAL_RCC_OscConfig+0x204>
 8000732:	e735      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000734:	b9ab      	cbnz	r3, 8000762 <HAL_RCC_OscConfig+0x246>
 8000736:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000738:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800073c:	f023 0301 	bic.w	r3, r3, #1
 8000740:	6223      	str	r3, [r4, #32]
 8000742:	6a23      	ldr	r3, [r4, #32]
 8000744:	f023 0304 	bic.w	r3, r3, #4
 8000748:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800074a:	f7ff fd2d 	bl	80001a8 <HAL_GetTick>
 800074e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000750:	6a23      	ldr	r3, [r4, #32]
 8000752:	0798      	lsls	r0, r3, #30
 8000754:	d5d3      	bpl.n	80006fe <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000756:	f7ff fd27 	bl	80001a8 <HAL_GetTick>
 800075a:	1b80      	subs	r0, r0, r6
 800075c:	4540      	cmp	r0, r8
 800075e:	d9f7      	bls.n	8000750 <HAL_RCC_OscConfig+0x234>
 8000760:	e71e      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000762:	2b05      	cmp	r3, #5
 8000764:	6a23      	ldr	r3, [r4, #32]
 8000766:	d103      	bne.n	8000770 <HAL_RCC_OscConfig+0x254>
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6223      	str	r3, [r4, #32]
 800076e:	e7ba      	b.n	80006e6 <HAL_RCC_OscConfig+0x1ca>
 8000770:	f023 0301 	bic.w	r3, r3, #1
 8000774:	6223      	str	r3, [r4, #32]
 8000776:	6a23      	ldr	r3, [r4, #32]
 8000778:	f023 0304 	bic.w	r3, r3, #4
 800077c:	e7b6      	b.n	80006ec <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800077e:	f7ff fd13 	bl	80001a8 <HAL_GetTick>
 8000782:	eba0 0008 	sub.w	r0, r0, r8
 8000786:	42b0      	cmp	r0, r6
 8000788:	d9b6      	bls.n	80006f8 <HAL_RCC_OscConfig+0x1dc>
 800078a:	e709      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
 800078c:	40021000 	.word	0x40021000
 8000790:	42420000 	.word	0x42420000
 8000794:	42420480 	.word	0x42420480
 8000798:	20000000 	.word	0x20000000
 800079c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007a0:	4c22      	ldr	r4, [pc, #136]	; (800082c <HAL_RCC_OscConfig+0x310>)
 80007a2:	6863      	ldr	r3, [r4, #4]
 80007a4:	f003 030c 	and.w	r3, r3, #12
 80007a8:	2b08      	cmp	r3, #8
 80007aa:	f43f aee2 	beq.w	8000572 <HAL_RCC_OscConfig+0x56>
 80007ae:	2300      	movs	r3, #0
 80007b0:	4e1f      	ldr	r6, [pc, #124]	; (8000830 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007b2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007b4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007b6:	d12b      	bne.n	8000810 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80007b8:	f7ff fcf6 	bl	80001a8 <HAL_GetTick>
 80007bc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	0199      	lsls	r1, r3, #6
 80007c2:	d41f      	bmi.n	8000804 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80007c4:	6a2b      	ldr	r3, [r5, #32]
 80007c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ca:	d105      	bne.n	80007d8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80007cc:	6862      	ldr	r2, [r4, #4]
 80007ce:	68a9      	ldr	r1, [r5, #8]
 80007d0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80007d4:	430a      	orrs	r2, r1
 80007d6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80007d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80007da:	6862      	ldr	r2, [r4, #4]
 80007dc:	430b      	orrs	r3, r1
 80007de:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80007e2:	4313      	orrs	r3, r2
 80007e4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80007e6:	2301      	movs	r3, #1
 80007e8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007ea:	f7ff fcdd 	bl	80001a8 <HAL_GetTick>
 80007ee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	019a      	lsls	r2, r3, #6
 80007f4:	f53f aea7 	bmi.w	8000546 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007f8:	f7ff fcd6 	bl	80001a8 <HAL_GetTick>
 80007fc:	1b40      	subs	r0, r0, r5
 80007fe:	2802      	cmp	r0, #2
 8000800:	d9f6      	bls.n	80007f0 <HAL_RCC_OscConfig+0x2d4>
 8000802:	e6cd      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000804:	f7ff fcd0 	bl	80001a8 <HAL_GetTick>
 8000808:	1bc0      	subs	r0, r0, r7
 800080a:	2802      	cmp	r0, #2
 800080c:	d9d7      	bls.n	80007be <HAL_RCC_OscConfig+0x2a2>
 800080e:	e6c7      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000810:	f7ff fcca 	bl	80001a8 <HAL_GetTick>
 8000814:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000816:	6823      	ldr	r3, [r4, #0]
 8000818:	019b      	lsls	r3, r3, #6
 800081a:	f57f ae94 	bpl.w	8000546 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800081e:	f7ff fcc3 	bl	80001a8 <HAL_GetTick>
 8000822:	1b40      	subs	r0, r0, r5
 8000824:	2802      	cmp	r0, #2
 8000826:	d9f6      	bls.n	8000816 <HAL_RCC_OscConfig+0x2fa>
 8000828:	e6ba      	b.n	80005a0 <HAL_RCC_OscConfig+0x84>
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	42420060 	.word	0x42420060

08000834 <HAL_RCC_GetSysClockFreq>:
{
 8000834:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8000838:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800083a:	ac02      	add	r4, sp, #8
 800083c:	f103 0510 	add.w	r5, r3, #16
 8000840:	4622      	mov	r2, r4
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	6859      	ldr	r1, [r3, #4]
 8000846:	3308      	adds	r3, #8
 8000848:	c203      	stmia	r2!, {r0, r1}
 800084a:	42ab      	cmp	r3, r5
 800084c:	4614      	mov	r4, r2
 800084e:	d1f7      	bne.n	8000840 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000850:	2301      	movs	r3, #1
 8000852:	f88d 3004 	strb.w	r3, [sp, #4]
 8000856:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000858:	4912      	ldr	r1, [pc, #72]	; (80008a4 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800085a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800085e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000860:	f003 020c 	and.w	r2, r3, #12
 8000864:	2a08      	cmp	r2, #8
 8000866:	d118      	bne.n	800089a <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000868:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800086c:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800086e:	bf48      	it	mi
 8000870:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000872:	a806      	add	r0, sp, #24
 8000874:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000876:	bf48      	it	mi
 8000878:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800087c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000880:	bf41      	itttt	mi
 8000882:	aa06      	addmi	r2, sp, #24
 8000884:	189b      	addmi	r3, r3, r2
 8000886:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800088a:	4b07      	ldrmi	r3, [pc, #28]	; (80008a8 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800088c:	bf54      	ite	pl
 800088e:	4b07      	ldrpl	r3, [pc, #28]	; (80008ac <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000890:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000894:	4358      	muls	r0, r3
}
 8000896:	b007      	add	sp, #28
 8000898:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800089c:	e7fb      	b.n	8000896 <HAL_RCC_GetSysClockFreq+0x62>
 800089e:	bf00      	nop
 80008a0:	08001b24 	.word	0x08001b24
 80008a4:	40021000 	.word	0x40021000
 80008a8:	007a1200 	.word	0x007a1200
 80008ac:	003d0900 	.word	0x003d0900

080008b0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008b0:	4a4d      	ldr	r2, [pc, #308]	; (80009e8 <HAL_RCC_ClockConfig+0x138>)
{
 80008b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008b6:	6813      	ldr	r3, [r2, #0]
{
 80008b8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	428b      	cmp	r3, r1
{
 80008c0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008c2:	d328      	bcc.n	8000916 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008c4:	682a      	ldr	r2, [r5, #0]
 80008c6:	0791      	lsls	r1, r2, #30
 80008c8:	d432      	bmi.n	8000930 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008ca:	07d2      	lsls	r2, r2, #31
 80008cc:	d438      	bmi.n	8000940 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ce:	4a46      	ldr	r2, [pc, #280]	; (80009e8 <HAL_RCC_ClockConfig+0x138>)
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	429e      	cmp	r6, r3
 80008d8:	d373      	bcc.n	80009c2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008da:	682a      	ldr	r2, [r5, #0]
 80008dc:	4c43      	ldr	r4, [pc, #268]	; (80009ec <HAL_RCC_ClockConfig+0x13c>)
 80008de:	f012 0f04 	tst.w	r2, #4
 80008e2:	d179      	bne.n	80009d8 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008e4:	0713      	lsls	r3, r2, #28
 80008e6:	d506      	bpl.n	80008f6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008e8:	6863      	ldr	r3, [r4, #4]
 80008ea:	692a      	ldr	r2, [r5, #16]
 80008ec:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008f4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80008f6:	f7ff ff9d 	bl	8000834 <HAL_RCC_GetSysClockFreq>
 80008fa:	6863      	ldr	r3, [r4, #4]
 80008fc:	4a3c      	ldr	r2, [pc, #240]	; (80009f0 <HAL_RCC_ClockConfig+0x140>)
 80008fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000902:	5cd3      	ldrb	r3, [r2, r3]
 8000904:	40d8      	lsrs	r0, r3
 8000906:	4b3b      	ldr	r3, [pc, #236]	; (80009f4 <HAL_RCC_ClockConfig+0x144>)
 8000908:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff fc1e 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000910:	2000      	movs	r0, #0
}
 8000912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000916:	6813      	ldr	r3, [r2, #0]
 8000918:	f023 0307 	bic.w	r3, r3, #7
 800091c:	430b      	orrs	r3, r1
 800091e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000920:	6813      	ldr	r3, [r2, #0]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	4299      	cmp	r1, r3
 8000928:	d0cc      	beq.n	80008c4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800092a:	2001      	movs	r0, #1
 800092c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000930:	492e      	ldr	r1, [pc, #184]	; (80009ec <HAL_RCC_ClockConfig+0x13c>)
 8000932:	68a8      	ldr	r0, [r5, #8]
 8000934:	684b      	ldr	r3, [r1, #4]
 8000936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800093a:	4303      	orrs	r3, r0
 800093c:	604b      	str	r3, [r1, #4]
 800093e:	e7c4      	b.n	80008ca <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000940:	686a      	ldr	r2, [r5, #4]
 8000942:	4c2a      	ldr	r4, [pc, #168]	; (80009ec <HAL_RCC_ClockConfig+0x13c>)
 8000944:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000946:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000948:	d11c      	bne.n	8000984 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800094e:	d0ec      	beq.n	800092a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000950:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000952:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000956:	f023 0303 	bic.w	r3, r3, #3
 800095a:	4313      	orrs	r3, r2
 800095c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800095e:	f7ff fc23 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000962:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000964:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000966:	2b01      	cmp	r3, #1
 8000968:	d114      	bne.n	8000994 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800096a:	6863      	ldr	r3, [r4, #4]
 800096c:	f003 030c 	and.w	r3, r3, #12
 8000970:	2b04      	cmp	r3, #4
 8000972:	d0ac      	beq.n	80008ce <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000974:	f7ff fc18 	bl	80001a8 <HAL_GetTick>
 8000978:	1bc0      	subs	r0, r0, r7
 800097a:	4540      	cmp	r0, r8
 800097c:	d9f5      	bls.n	800096a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 800097e:	2003      	movs	r0, #3
 8000980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000984:	2a02      	cmp	r2, #2
 8000986:	d102      	bne.n	800098e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000988:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800098c:	e7df      	b.n	800094e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098e:	f013 0f02 	tst.w	r3, #2
 8000992:	e7dc      	b.n	800094e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000994:	2b02      	cmp	r3, #2
 8000996:	d10f      	bne.n	80009b8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000998:	6863      	ldr	r3, [r4, #4]
 800099a:	f003 030c 	and.w	r3, r3, #12
 800099e:	2b08      	cmp	r3, #8
 80009a0:	d095      	beq.n	80008ce <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a2:	f7ff fc01 	bl	80001a8 <HAL_GetTick>
 80009a6:	1bc0      	subs	r0, r0, r7
 80009a8:	4540      	cmp	r0, r8
 80009aa:	d9f5      	bls.n	8000998 <HAL_RCC_ClockConfig+0xe8>
 80009ac:	e7e7      	b.n	800097e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ae:	f7ff fbfb 	bl	80001a8 <HAL_GetTick>
 80009b2:	1bc0      	subs	r0, r0, r7
 80009b4:	4540      	cmp	r0, r8
 80009b6:	d8e2      	bhi.n	800097e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009b8:	6863      	ldr	r3, [r4, #4]
 80009ba:	f013 0f0c 	tst.w	r3, #12
 80009be:	d1f6      	bne.n	80009ae <HAL_RCC_ClockConfig+0xfe>
 80009c0:	e785      	b.n	80008ce <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009c2:	6813      	ldr	r3, [r2, #0]
 80009c4:	f023 0307 	bic.w	r3, r3, #7
 80009c8:	4333      	orrs	r3, r6
 80009ca:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009cc:	6813      	ldr	r3, [r2, #0]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	429e      	cmp	r6, r3
 80009d4:	d1a9      	bne.n	800092a <HAL_RCC_ClockConfig+0x7a>
 80009d6:	e780      	b.n	80008da <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	68e9      	ldr	r1, [r5, #12]
 80009dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009e0:	430b      	orrs	r3, r1
 80009e2:	6063      	str	r3, [r4, #4]
 80009e4:	e77e      	b.n	80008e4 <HAL_RCC_ClockConfig+0x34>
 80009e6:	bf00      	nop
 80009e8:	40022000 	.word	0x40022000
 80009ec:	40021000 	.word	0x40021000
 80009f0:	08001b3e 	.word	0x08001b3e
 80009f4:	20000000 	.word	0x20000000

080009f8 <HAL_RCC_GetHCLKFreq>:
}
 80009f8:	4b01      	ldr	r3, [pc, #4]	; (8000a00 <HAL_RCC_GetHCLKFreq+0x8>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000000 	.word	0x20000000

08000a04 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a0e:	5cd3      	ldrb	r3, [r2, r3]
 8000a10:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a12:	6810      	ldr	r0, [r2, #0]
}    
 8000a14:	40d8      	lsrs	r0, r3
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	08001b4e 	.word	0x08001b4e
 8000a20:	20000000 	.word	0x20000000

08000a24 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a32:	6810      	ldr	r0, [r2, #0]
} 
 8000a34:	40d8      	lsrs	r0, r3
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	08001b4e 	.word	0x08001b4e
 8000a40:	20000000 	.word	0x20000000

08000a44 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000a44:	6803      	ldr	r3, [r0, #0]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000a4c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	f022 0201 	bic.w	r2, r2, #1
 8000a54:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000a56:	2320      	movs	r3, #32
 8000a58:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000a5c:	4770      	bx	lr
	...

08000a60 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a64:	6805      	ldr	r5, [r0, #0]
 8000a66:	68c2      	ldr	r2, [r0, #12]
 8000a68:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a6a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a70:	4313      	orrs	r3, r2
 8000a72:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a74:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000a76:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000a7c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000a80:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a84:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000a86:	4313      	orrs	r3, r2
 8000a88:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a8a:	696b      	ldr	r3, [r5, #20]
 8000a8c:	6982      	ldr	r2, [r0, #24]
 8000a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a92:	4313      	orrs	r3, r2
 8000a94:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000a96:	4b40      	ldr	r3, [pc, #256]	; (8000b98 <UART_SetConfig+0x138>)
{
 8000a98:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000a9a:	429d      	cmp	r5, r3
 8000a9c:	f04f 0419 	mov.w	r4, #25
 8000aa0:	d146      	bne.n	8000b30 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000aa2:	f7ff ffbf 	bl	8000a24 <HAL_RCC_GetPCLK2Freq>
 8000aa6:	fb04 f300 	mul.w	r3, r4, r0
 8000aaa:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000aae:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ab2:	00b6      	lsls	r6, r6, #2
 8000ab4:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ab8:	fbb3 f3f8 	udiv	r3, r3, r8
 8000abc:	011e      	lsls	r6, r3, #4
 8000abe:	f7ff ffb1 	bl	8000a24 <HAL_RCC_GetPCLK2Freq>
 8000ac2:	4360      	muls	r0, r4
 8000ac4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ace:	f7ff ffa9 	bl	8000a24 <HAL_RCC_GetPCLK2Freq>
 8000ad2:	4360      	muls	r0, r4
 8000ad4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ade:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ae2:	fb08 7313 	mls	r3, r8, r3, r7
 8000ae6:	011b      	lsls	r3, r3, #4
 8000ae8:	3332      	adds	r3, #50	; 0x32
 8000aea:	fbb3 f3f8 	udiv	r3, r3, r8
 8000aee:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000af2:	f7ff ff97 	bl	8000a24 <HAL_RCC_GetPCLK2Freq>
 8000af6:	4360      	muls	r0, r4
 8000af8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	fbb0 faf2 	udiv	sl, r0, r2
 8000b02:	f7ff ff8f 	bl	8000a24 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b06:	4360      	muls	r0, r4
 8000b08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b12:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b16:	fb08 a313 	mls	r3, r8, r3, sl
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	3332      	adds	r3, #50	; 0x32
 8000b1e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	433b      	orrs	r3, r7
 8000b28:	4433      	add	r3, r6
 8000b2a:	60ab      	str	r3, [r5, #8]
 8000b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b30:	f7ff ff68 	bl	8000a04 <HAL_RCC_GetPCLK1Freq>
 8000b34:	fb04 f300 	mul.w	r3, r4, r0
 8000b38:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b3c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b40:	00b6      	lsls	r6, r6, #2
 8000b42:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b46:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b4a:	011e      	lsls	r6, r3, #4
 8000b4c:	f7ff ff5a 	bl	8000a04 <HAL_RCC_GetPCLK1Freq>
 8000b50:	4360      	muls	r0, r4
 8000b52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b5c:	f7ff ff52 	bl	8000a04 <HAL_RCC_GetPCLK1Freq>
 8000b60:	4360      	muls	r0, r4
 8000b62:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b6c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b70:	fb08 7313 	mls	r3, r8, r3, r7
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	3332      	adds	r3, #50	; 0x32
 8000b78:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b7c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b80:	f7ff ff40 	bl	8000a04 <HAL_RCC_GetPCLK1Freq>
 8000b84:	4360      	muls	r0, r4
 8000b86:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	fbb0 faf2 	udiv	sl, r0, r2
 8000b90:	f7ff ff38 	bl	8000a04 <HAL_RCC_GetPCLK1Freq>
 8000b94:	e7b7      	b.n	8000b06 <UART_SetConfig+0xa6>
 8000b96:	bf00      	nop
 8000b98:	40013800 	.word	0x40013800

08000b9c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	460e      	mov	r6, r1
 8000ba2:	4617      	mov	r7, r2
 8000ba4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000ba6:	6821      	ldr	r1, [r4, #0]
 8000ba8:	680b      	ldr	r3, [r1, #0]
 8000baa:	ea36 0303 	bics.w	r3, r6, r3
 8000bae:	d101      	bne.n	8000bb4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000bb0:	2000      	movs	r0, #0
}
 8000bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000bb4:	1c6b      	adds	r3, r5, #1
 8000bb6:	d0f7      	beq.n	8000ba8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000bb8:	b995      	cbnz	r5, 8000be0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000bba:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000bbc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000bc4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	f022 0201 	bic.w	r2, r2, #1
 8000bcc:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000bce:	2320      	movs	r3, #32
 8000bd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000bd4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000be0:	f7ff fae2 	bl	80001a8 <HAL_GetTick>
 8000be4:	1bc0      	subs	r0, r0, r7
 8000be6:	4285      	cmp	r5, r0
 8000be8:	d2dd      	bcs.n	8000ba6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000bea:	e7e6      	b.n	8000bba <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000bec <HAL_UART_Init>:
{
 8000bec:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000bee:	4604      	mov	r4, r0
 8000bf0:	b340      	cbz	r0, 8000c44 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000bf2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000bf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bfa:	b91b      	cbnz	r3, 8000c04 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000bfc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000c00:	f000 fa88 	bl	8001114 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000c04:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000c06:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000c08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000c0c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c0e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000c10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c14:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c16:	f7ff ff23 	bl	8000a60 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c1a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c1c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c1e:	691a      	ldr	r2, [r3, #16]
 8000c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c2c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c34:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000c36:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c38:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000c3a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000c3e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000c42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c44:	2001      	movs	r0, #1
}
 8000c46:	bd10      	pop	{r4, pc}

08000c48 <HAL_UART_Transmit>:
{
 8000c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c4c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000c4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000c52:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000c54:	2b20      	cmp	r3, #32
{
 8000c56:	460d      	mov	r5, r1
 8000c58:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000c5a:	d14e      	bne.n	8000cfa <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d049      	beq.n	8000cf4 <HAL_UART_Transmit+0xac>
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	d047      	beq.n	8000cf4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000c64:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d046      	beq.n	8000cfa <HAL_UART_Transmit+0xb2>
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c76:	2321      	movs	r3, #33	; 0x21
 8000c78:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000c7c:	f7ff fa94 	bl	80001a8 <HAL_GetTick>
 8000c80:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000c82:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000c86:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000c8a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	b96b      	cbnz	r3, 8000cac <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4632      	mov	r2, r6
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	4620      	mov	r0, r4
 8000c98:	f7ff ff80 	bl	8000b9c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000c9c:	b9a8      	cbnz	r0, 8000cca <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000c9e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000ca0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ca4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000cac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cae:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cb6:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cb8:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cc2:	d10e      	bne.n	8000ce2 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cc4:	f7ff ff6a 	bl	8000b9c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000cc8:	b110      	cbz	r0, 8000cd0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000cca:	2003      	movs	r0, #3
 8000ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000cd0:	882b      	ldrh	r3, [r5, #0]
 8000cd2:	6822      	ldr	r2, [r4, #0]
 8000cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cd8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000cda:	6923      	ldr	r3, [r4, #16]
 8000cdc:	b943      	cbnz	r3, 8000cf0 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000cde:	3502      	adds	r5, #2
 8000ce0:	e7d3      	b.n	8000c8a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ce2:	f7ff ff5b 	bl	8000b9c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	d1ef      	bne.n	8000cca <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	782a      	ldrb	r2, [r5, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	3501      	adds	r5, #1
 8000cf2:	e7ca      	b.n	8000c8a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000cfa:	2002      	movs	r0, #2
}
 8000cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d00 <HAL_UART_TxCpltCallback>:
 8000d00:	4770      	bx	lr

08000d02 <HAL_UART_RxCpltCallback>:
 8000d02:	4770      	bx	lr

08000d04 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d04:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000d08:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d0a:	2b22      	cmp	r3, #34	; 0x22
 8000d0c:	d136      	bne.n	8000d7c <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d0e:	6883      	ldr	r3, [r0, #8]
 8000d10:	6901      	ldr	r1, [r0, #16]
 8000d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d16:	6802      	ldr	r2, [r0, #0]
 8000d18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d1a:	d123      	bne.n	8000d64 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d1c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000d1e:	b9e9      	cbnz	r1, 8000d5c <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d24:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000d28:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8000d2a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000d2c:	3c01      	subs	r4, #1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000d32:	b98c      	cbnz	r4, 8000d58 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000d34:	6803      	ldr	r3, [r0, #0]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	f022 0220 	bic.w	r2, r2, #32
 8000d3c:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d44:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000d46:	695a      	ldr	r2, [r3, #20]
 8000d48:	f022 0201 	bic.w	r2, r2, #1
 8000d4c:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000d4e:	2320      	movs	r3, #32
 8000d50:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000d54:	f7ff ffd5 	bl	8000d02 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8000d58:	2000      	movs	r0, #0
}
 8000d5a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	f823 2b01 	strh.w	r2, [r3], #1
 8000d62:	e7e1      	b.n	8000d28 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000d64:	b921      	cbnz	r1, 8000d70 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000d66:	1c59      	adds	r1, r3, #1
 8000d68:	6852      	ldr	r2, [r2, #4]
 8000d6a:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e7dc      	b.n	8000d2a <UART_Receive_IT+0x26>
 8000d70:	6852      	ldr	r2, [r2, #4]
 8000d72:	1c59      	adds	r1, r3, #1
 8000d74:	6281      	str	r1, [r0, #40]	; 0x28
 8000d76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d7a:	e7f7      	b.n	8000d6c <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	bd10      	pop	{r4, pc}

08000d80 <HAL_UART_ErrorCallback>:
 8000d80:	4770      	bx	lr
	...

08000d84 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000d84:	6803      	ldr	r3, [r0, #0]
{
 8000d86:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000d88:	681a      	ldr	r2, [r3, #0]
{
 8000d8a:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8000d8c:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000d8e:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000d90:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8000d92:	d107      	bne.n	8000da4 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000d94:	0696      	lsls	r6, r2, #26
 8000d96:	d55a      	bpl.n	8000e4e <HAL_UART_IRQHandler+0xca>
 8000d98:	068d      	lsls	r5, r1, #26
 8000d9a:	d558      	bpl.n	8000e4e <HAL_UART_IRQHandler+0xca>
}
 8000d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000da0:	f7ff bfb0 	b.w	8000d04 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000da4:	f015 0501 	ands.w	r5, r5, #1
 8000da8:	d102      	bne.n	8000db0 <HAL_UART_IRQHandler+0x2c>
 8000daa:	f411 7f90 	tst.w	r1, #288	; 0x120
 8000dae:	d04e      	beq.n	8000e4e <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000db0:	07d3      	lsls	r3, r2, #31
 8000db2:	d505      	bpl.n	8000dc0 <HAL_UART_IRQHandler+0x3c>
 8000db4:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000db6:	bf42      	ittt	mi
 8000db8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000dba:	f043 0301 	orrmi.w	r3, r3, #1
 8000dbe:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000dc0:	0750      	lsls	r0, r2, #29
 8000dc2:	d504      	bpl.n	8000dce <HAL_UART_IRQHandler+0x4a>
 8000dc4:	b11d      	cbz	r5, 8000dce <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000dc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000dce:	0793      	lsls	r3, r2, #30
 8000dd0:	d504      	bpl.n	8000ddc <HAL_UART_IRQHandler+0x58>
 8000dd2:	b11d      	cbz	r5, 8000ddc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000dd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000ddc:	0716      	lsls	r6, r2, #28
 8000dde:	d504      	bpl.n	8000dea <HAL_UART_IRQHandler+0x66>
 8000de0:	b11d      	cbz	r5, 8000dea <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000de2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000dea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d066      	beq.n	8000ebe <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000df0:	0695      	lsls	r5, r2, #26
 8000df2:	d504      	bpl.n	8000dfe <HAL_UART_IRQHandler+0x7a>
 8000df4:	0688      	lsls	r0, r1, #26
 8000df6:	d502      	bpl.n	8000dfe <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f7ff ff83 	bl	8000d04 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000dfe:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8000e00:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e02:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000e04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000e06:	0711      	lsls	r1, r2, #28
 8000e08:	d402      	bmi.n	8000e10 <HAL_UART_IRQHandler+0x8c>
 8000e0a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000e0e:	d01a      	beq.n	8000e46 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8000e10:	f7ff fe18 	bl	8000a44 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	695a      	ldr	r2, [r3, #20]
 8000e18:	0652      	lsls	r2, r2, #25
 8000e1a:	d510      	bpl.n	8000e3e <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000e1c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000e1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e24:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000e26:	b150      	cbz	r0, 8000e3e <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <HAL_UART_IRQHandler+0x13c>)
 8000e2a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000e2c:	f7ff fa3c 	bl	80002a8 <HAL_DMA_Abort_IT>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d044      	beq.n	8000ebe <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000e34:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8000e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000e3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e3c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8000e3e:	4620      	mov	r0, r4
 8000e40:	f7ff ff9e 	bl	8000d80 <HAL_UART_ErrorCallback>
 8000e44:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8000e46:	f7ff ff9b 	bl	8000d80 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e4a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000e4c:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000e4e:	0616      	lsls	r6, r2, #24
 8000e50:	d527      	bpl.n	8000ea2 <HAL_UART_IRQHandler+0x11e>
 8000e52:	060d      	lsls	r5, r1, #24
 8000e54:	d525      	bpl.n	8000ea2 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8000e56:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000e5a:	2a21      	cmp	r2, #33	; 0x21
 8000e5c:	d12f      	bne.n	8000ebe <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e5e:	68a2      	ldr	r2, [r4, #8]
 8000e60:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000e64:	6a22      	ldr	r2, [r4, #32]
 8000e66:	d117      	bne.n	8000e98 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000e68:	8811      	ldrh	r1, [r2, #0]
 8000e6a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000e6e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000e70:	6921      	ldr	r1, [r4, #16]
 8000e72:	b979      	cbnz	r1, 8000e94 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8000e74:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8000e76:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8000e78:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000e7a:	3a01      	subs	r2, #1
 8000e7c:	b292      	uxth	r2, r2
 8000e7e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000e80:	b9ea      	cbnz	r2, 8000ebe <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e88:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8000e94:	3201      	adds	r2, #1
 8000e96:	e7ee      	b.n	8000e76 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000e98:	1c51      	adds	r1, r2, #1
 8000e9a:	6221      	str	r1, [r4, #32]
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	e7ea      	b.n	8000e78 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000ea2:	0650      	lsls	r0, r2, #25
 8000ea4:	d50b      	bpl.n	8000ebe <HAL_UART_IRQHandler+0x13a>
 8000ea6:	064a      	lsls	r2, r1, #25
 8000ea8:	d509      	bpl.n	8000ebe <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000eaa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8000eac:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eb2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8000eba:	f7ff ff21 	bl	8000d00 <HAL_UART_TxCpltCallback>
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	08000ec5 	.word	0x08000ec5

08000ec4 <UART_DMAAbortOnError>:
{
 8000ec4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8000ec6:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ec8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8000eca:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000ecc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8000ece:	f7ff ff57 	bl	8000d80 <HAL_UART_ErrorCallback>
 8000ed2:	bd08      	pop	{r3, pc}

08000ed4 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8000ed4:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
  temp2 = huart->RxState;
 8000ed8:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
}
 8000edc:	4310      	orrs	r0, r2
 8000ede:	4770      	bx	lr

08000ee0 <sendData>:
	fluxs = ((float)npuls)/7.5;
	npuls=0;
	return fluxs;
}

void sendData(u_int8_t *message,int size){
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	460d      	mov	r5, r1
//    strcat(string,END_CHAR);
//	char *string = "&";
//	char *str = "#";
//	strcat(message,str);
//	strcat(string,message);
	HAL_UART_Transmit(&huart1, (uint8_t *) INIT_CHAR,sizeof(INIT_CHAR), 100);
 8000ee6:	2364      	movs	r3, #100	; 0x64
 8000ee8:	2202      	movs	r2, #2
 8000eea:	490b      	ldr	r1, [pc, #44]	; (8000f18 <sendData+0x38>)
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <sendData+0x3c>)
 8000eee:	f7ff feab 	bl	8000c48 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) message,size, 100);
 8000ef2:	2364      	movs	r3, #100	; 0x64
 8000ef4:	b2aa      	uxth	r2, r5
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	4808      	ldr	r0, [pc, #32]	; (8000f1c <sendData+0x3c>)
 8000efa:	f7ff fea5 	bl	8000c48 <HAL_UART_Transmit>
	while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <sendData+0x3c>)
 8000f00:	f7ff ffe8 	bl	8000ed4 <HAL_UART_GetState>
 8000f04:	2820      	cmp	r0, #32
 8000f06:	d1fa      	bne.n	8000efe <sendData+0x1e>
	HAL_UART_Transmit(&huart1, (uint8_t *) END_CHAR,sizeof(END_CHAR) + sizeof(INIT_CHAR), 100);
 8000f08:	2364      	movs	r3, #100	; 0x64

}
 8000f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart1, (uint8_t *) END_CHAR,sizeof(END_CHAR) + sizeof(INIT_CHAR), 100);
 8000f0e:	2204      	movs	r2, #4
 8000f10:	4903      	ldr	r1, [pc, #12]	; (8000f20 <sendData+0x40>)
 8000f12:	4802      	ldr	r0, [pc, #8]	; (8000f1c <sendData+0x3c>)
 8000f14:	f7ff be98 	b.w	8000c48 <HAL_UART_Transmit>
 8000f18:	08001b3a 	.word	0x08001b3a
 8000f1c:	20000098 	.word	0x20000098
 8000f20:	08001b3c 	.word	0x08001b3c

08000f24 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f24:	2302      	movs	r3, #2
{
 8000f26:	b510      	push	{r4, lr}
 8000f28:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f2a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000f30:	2310      	movs	r3, #16
 8000f32:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f34:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f36:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f38:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3a:	f7ff faef 	bl	800051c <HAL_RCC_OscConfig>
 8000f3e:	4601      	mov	r1, r0
 8000f40:	b100      	cbz	r0, 8000f44 <SystemClock_Config+0x20>
 8000f42:	e7fe      	b.n	8000f42 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f44:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f46:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f48:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f4e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f52:	f7ff fcad 	bl	80008b0 <HAL_RCC_ClockConfig>
 8000f56:	4604      	mov	r4, r0
 8000f58:	b100      	cbz	r0, 8000f5c <SystemClock_Config+0x38>
 8000f5a:	e7fe      	b.n	8000f5a <SystemClock_Config+0x36>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000f5c:	f7ff fd4c 	bl	80009f8 <HAL_RCC_GetHCLKFreq>
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f68:	f7ff f976 	bl	8000258 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000f6c:	2004      	movs	r0, #4
 8000f6e:	f7ff f989 	bl	8000284 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f72:	4622      	mov	r2, r4
 8000f74:	4621      	mov	r1, r4
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	f7ff f92d 	bl	80001d8 <HAL_NVIC_SetPriority>
}
 8000f7e:	b010      	add	sp, #64	; 0x40
 8000f80:	bd10      	pop	{r4, pc}
	...

08000f84 <main>:
{
 8000f84:	b510      	push	{r4, lr}
 8000f86:	b088      	sub	sp, #32
  HAL_Init();
 8000f88:	f7ff f8f4 	bl	8000174 <HAL_Init>
  SystemClock_Config();
 8000f8c:	f7ff ffca 	bl	8000f24 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	4b31      	ldr	r3, [pc, #196]	; (8001058 <main+0xd4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f98:	4830      	ldr	r0, [pc, #192]	; (800105c <main+0xd8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	f042 0210 	orr.w	r2, r2, #16
 8000f9e:	619a      	str	r2, [r3, #24]
 8000fa0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	f002 0210 	and.w	r2, r2, #16
 8000fa8:	9200      	str	r2, [sp, #0]
 8000faa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fac:	699a      	ldr	r2, [r3, #24]
 8000fae:	f042 0220 	orr.w	r2, r2, #32
 8000fb2:	619a      	str	r2, [r3, #24]
 8000fb4:	699a      	ldr	r2, [r3, #24]
 8000fb6:	f002 0220 	and.w	r2, r2, #32
 8000fba:	9201      	str	r2, [sp, #4]
 8000fbc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	699a      	ldr	r2, [r3, #24]
 8000fc0:	f042 0204 	orr.w	r2, r2, #4
 8000fc4:	619a      	str	r2, [r3, #24]
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	f002 0204 	and.w	r2, r2, #4
 8000fcc:	9202      	str	r2, [sp, #8]
 8000fce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	699a      	ldr	r2, [r3, #24]
 8000fd2:	f042 0208 	orr.w	r2, r2, #8
 8000fd6:	619a      	str	r2, [r3, #24]
 8000fd8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	9303      	str	r3, [sp, #12]
 8000fe2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fe4:	f7ff fa88 	bl	80004f8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	a904      	add	r1, sp, #16
 8000ff6:	4819      	ldr	r0, [pc, #100]	; (800105c <main+0xd8>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f7ff f99d 	bl	8000338 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ffe:	23c0      	movs	r3, #192	; 0xc0
 8001000:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <main+0xdc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	a904      	add	r1, sp, #16
 8001006:	4817      	ldr	r0, [pc, #92]	; (8001064 <main+0xe0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001008:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f7ff f994 	bl	8000338 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001010:	4622      	mov	r2, r4
 8001012:	4621      	mov	r1, r4
 8001014:	2017      	movs	r0, #23
 8001016:	f7ff f8df 	bl	80001d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800101a:	2017      	movs	r0, #23
 800101c:	f7ff f910 	bl	8000240 <HAL_NVIC_EnableIRQ>
  huart1.Init.BaudRate = 9600;
 8001020:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8001024:	4810      	ldr	r0, [pc, #64]	; (8001068 <main+0xe4>)
  huart1.Init.BaudRate = 9600;
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <main+0xe8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001028:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 800102a:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800102e:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001030:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001032:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001034:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103a:	f7ff fdd7 	bl	8000bec <HAL_UART_Init>
 800103e:	b100      	cbz	r0, 8001042 <main+0xbe>
 8001040:	e7fe      	b.n	8001040 <main+0xbc>
  int len = sprintf(message, "%d.%d", intpart, fraction);
 8001042:	490b      	ldr	r1, [pc, #44]	; (8001070 <main+0xec>)
 8001044:	2339      	movs	r3, #57	; 0x39
 8001046:	2204      	movs	r2, #4
 8001048:	a804      	add	r0, sp, #16
 800104a:	f000 f925 	bl	8001298 <siprintf>
  sendData((u_int8_t *)(&message),sizeof(len));
 800104e:	2104      	movs	r1, #4
 8001050:	a804      	add	r0, sp, #16
 8001052:	f7ff ff45 	bl	8000ee0 <sendData>
 8001056:	e7fe      	b.n	8001056 <main+0xd2>
 8001058:	40021000 	.word	0x40021000
 800105c:	40011000 	.word	0x40011000
 8001060:	10110000 	.word	0x10110000
 8001064:	40010c00 	.word	0x40010c00
 8001068:	20000098 	.word	0x20000098
 800106c:	40013800 	.word	0x40013800
 8001070:	08001b34 	.word	0x08001b34

08001074 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */


//Iterrupt porta pb6 e pb4
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	npuls++;
 8001074:	4a02      	ldr	r2, [pc, #8]	; (8001080 <HAL_GPIO_EXTI_Callback+0xc>)
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000084 	.word	0x20000084

08001084 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001084:	4b21      	ldr	r3, [pc, #132]	; (800110c <HAL_MspInit+0x88>)
{
 8001086:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001088:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 800108c:	f042 0201 	orr.w	r2, r2, #1
 8001090:	619a      	str	r2, [r3, #24]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109c:	f7ff f88a 	bl	80001b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f06f 000b 	mvn.w	r0, #11
 80010a6:	4611      	mov	r1, r2
 80010a8:	f7ff f896 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f06f 000a 	mvn.w	r0, #10
 80010b2:	4611      	mov	r1, r2
 80010b4:	f7ff f890 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f06f 0009 	mvn.w	r0, #9
 80010be:	4611      	mov	r1, r2
 80010c0:	f7ff f88a 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f06f 0004 	mvn.w	r0, #4
 80010ca:	4611      	mov	r1, r2
 80010cc:	f7ff f884 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f06f 0003 	mvn.w	r0, #3
 80010d6:	4611      	mov	r1, r2
 80010d8:	f7ff f87e 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	f06f 0001 	mvn.w	r0, #1
 80010e2:	4611      	mov	r1, r2
 80010e4:	f7ff f878 	bl	80001d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f04f 30ff 	mov.w	r0, #4294967295
 80010ee:	4611      	mov	r1, r2
 80010f0:	f7ff f872 	bl	80001d8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_MspInit+0x8c>)
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001104:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	b003      	add	sp, #12
 8001108:	f85d fb04 	ldr.w	pc, [sp], #4
 800110c:	40021000 	.word	0x40021000
 8001110:	40010000 	.word	0x40010000

08001114 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001116:	6802      	ldr	r2, [r0, #0]
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_UART_MspInit+0x60>)
{
 800111a:	b086      	sub	sp, #24
  if(huart->Instance==USART1)
 800111c:	429a      	cmp	r2, r3
 800111e:	d127      	bne.n	8001170 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001120:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001124:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001128:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800112c:	619a      	str	r2, [r3, #24]
 800112e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800113a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001144:	2303      	movs	r3, #3

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001148:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f7ff f8f5 	bl	8000338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800114e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	a902      	add	r1, sp, #8
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001156:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f7ff f8ec 	bl	8000338 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001160:	2025      	movs	r0, #37	; 0x25
 8001162:	4622      	mov	r2, r4
 8001164:	4621      	mov	r1, r4
 8001166:	f7ff f837 	bl	80001d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800116a:	2025      	movs	r0, #37	; 0x25
 800116c:	f7ff f868 	bl	8000240 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001170:	b006      	add	sp, #24
 8001172:	bd10      	pop	{r4, pc}
 8001174:	40013800 	.word	0x40013800
 8001178:	40010800 	.word	0x40010800

0800117c <NMI_Handler>:
 800117c:	4770      	bx	lr

0800117e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800117e:	e7fe      	b.n	800117e <HardFault_Handler>

08001180 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler>

08001182 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler>

08001184 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler>

08001186 <SVC_Handler>:
 8001186:	4770      	bx	lr

08001188 <DebugMon_Handler>:
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800118c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118e:	f7ff f803 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001196:	f7ff b882 	b.w	800029e <HAL_SYSTICK_IRQHandler>

0800119a <EXTI9_5_IRQHandler>:

/**
* @brief This function handles EXTI line[9:5] interrupts.
*/
void EXTI9_5_IRQHandler(void)
{
 800119a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800119c:	2040      	movs	r0, #64	; 0x40
 800119e:	f7ff f9b1 	bl	8000504 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011a6:	2080      	movs	r0, #128	; 0x80
 80011a8:	f7ff b9ac 	b.w	8000504 <HAL_GPIO_EXTI_IRQHandler>

080011ac <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011ac:	4801      	ldr	r0, [pc, #4]	; (80011b4 <USART1_IRQHandler+0x8>)
 80011ae:	f7ff bde9 	b.w	8000d84 <HAL_UART_IRQHandler>
 80011b2:	bf00      	nop
 80011b4:	20000098 	.word	0x20000098

080011b8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <SystemInit+0x40>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	f042 0201 	orr.w	r2, r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011c2:	6859      	ldr	r1, [r3, #4]
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <SystemInit+0x44>)
 80011c6:	400a      	ands	r2, r1
 80011c8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011d4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011dc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011e4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80011ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <SystemInit+0x48>)
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	f8ff0000 	.word	0xf8ff0000
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001204:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001206:	e003      	b.n	8001210 <LoopCopyDataInit>

08001208 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800120a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800120c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800120e:	3104      	adds	r1, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001214:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001216:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001218:	d3f6      	bcc.n	8001208 <CopyDataInit>
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800121c:	e002      	b.n	8001224 <LoopFillZerobss>

0800121e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001220:	f842 3b04 	str.w	r3, [r2], #4

08001224 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001226:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001228:	d3f9      	bcc.n	800121e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800122a:	f7ff ffc5 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800122e:	f000 f80f 	bl	8001250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fea7 	bl	8000f84 <main>
  bx lr
 8001236:	4770      	bx	lr
  ldr r3, =_sidata
 8001238:	08001b94 	.word	0x08001b94
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001240:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8001244:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8001248:	200000dc 	.word	0x200000dc

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <__libc_init_array>:
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	2500      	movs	r5, #0
 8001254:	4e0c      	ldr	r6, [pc, #48]	; (8001288 <__libc_init_array+0x38>)
 8001256:	4c0d      	ldr	r4, [pc, #52]	; (800128c <__libc_init_array+0x3c>)
 8001258:	1ba4      	subs	r4, r4, r6
 800125a:	10a4      	asrs	r4, r4, #2
 800125c:	42a5      	cmp	r5, r4
 800125e:	d109      	bne.n	8001274 <__libc_init_array+0x24>
 8001260:	f000 fc54 	bl	8001b0c <_init>
 8001264:	2500      	movs	r5, #0
 8001266:	4e0a      	ldr	r6, [pc, #40]	; (8001290 <__libc_init_array+0x40>)
 8001268:	4c0a      	ldr	r4, [pc, #40]	; (8001294 <__libc_init_array+0x44>)
 800126a:	1ba4      	subs	r4, r4, r6
 800126c:	10a4      	asrs	r4, r4, #2
 800126e:	42a5      	cmp	r5, r4
 8001270:	d105      	bne.n	800127e <__libc_init_array+0x2e>
 8001272:	bd70      	pop	{r4, r5, r6, pc}
 8001274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001278:	4798      	blx	r3
 800127a:	3501      	adds	r5, #1
 800127c:	e7ee      	b.n	800125c <__libc_init_array+0xc>
 800127e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001282:	4798      	blx	r3
 8001284:	3501      	adds	r5, #1
 8001286:	e7f2      	b.n	800126e <__libc_init_array+0x1e>
 8001288:	08001b8c 	.word	0x08001b8c
 800128c:	08001b8c 	.word	0x08001b8c
 8001290:	08001b8c 	.word	0x08001b8c
 8001294:	08001b90 	.word	0x08001b90

08001298 <siprintf>:
 8001298:	b40e      	push	{r1, r2, r3}
 800129a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800129e:	b500      	push	{lr}
 80012a0:	b09c      	sub	sp, #112	; 0x70
 80012a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80012a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80012aa:	9104      	str	r1, [sp, #16]
 80012ac:	9107      	str	r1, [sp, #28]
 80012ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012b2:	ab1d      	add	r3, sp, #116	; 0x74
 80012b4:	9002      	str	r0, [sp, #8]
 80012b6:	9006      	str	r0, [sp, #24]
 80012b8:	4808      	ldr	r0, [pc, #32]	; (80012dc <siprintf+0x44>)
 80012ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80012be:	f8ad 1016 	strh.w	r1, [sp, #22]
 80012c2:	6800      	ldr	r0, [r0, #0]
 80012c4:	a902      	add	r1, sp, #8
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f000 f866 	bl	8001398 <_svfiprintf_r>
 80012cc:	2200      	movs	r2, #0
 80012ce:	9b02      	ldr	r3, [sp, #8]
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	b01c      	add	sp, #112	; 0x70
 80012d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80012d8:	b003      	add	sp, #12
 80012da:	4770      	bx	lr
 80012dc:	20000004 	.word	0x20000004

080012e0 <__ssputs_r>:
 80012e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012e4:	688e      	ldr	r6, [r1, #8]
 80012e6:	4682      	mov	sl, r0
 80012e8:	429e      	cmp	r6, r3
 80012ea:	460c      	mov	r4, r1
 80012ec:	4691      	mov	r9, r2
 80012ee:	4698      	mov	r8, r3
 80012f0:	d835      	bhi.n	800135e <__ssputs_r+0x7e>
 80012f2:	898a      	ldrh	r2, [r1, #12]
 80012f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80012f8:	d031      	beq.n	800135e <__ssputs_r+0x7e>
 80012fa:	2302      	movs	r3, #2
 80012fc:	6825      	ldr	r5, [r4, #0]
 80012fe:	6909      	ldr	r1, [r1, #16]
 8001300:	1a6f      	subs	r7, r5, r1
 8001302:	6965      	ldr	r5, [r4, #20]
 8001304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001308:	fb95 f5f3 	sdiv	r5, r5, r3
 800130c:	f108 0301 	add.w	r3, r8, #1
 8001310:	443b      	add	r3, r7
 8001312:	429d      	cmp	r5, r3
 8001314:	bf38      	it	cc
 8001316:	461d      	movcc	r5, r3
 8001318:	0553      	lsls	r3, r2, #21
 800131a:	d531      	bpl.n	8001380 <__ssputs_r+0xa0>
 800131c:	4629      	mov	r1, r5
 800131e:	f000 fb47 	bl	80019b0 <_malloc_r>
 8001322:	4606      	mov	r6, r0
 8001324:	b950      	cbnz	r0, 800133c <__ssputs_r+0x5c>
 8001326:	230c      	movs	r3, #12
 8001328:	f8ca 3000 	str.w	r3, [sl]
 800132c:	89a3      	ldrh	r3, [r4, #12]
 800132e:	f04f 30ff 	mov.w	r0, #4294967295
 8001332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001336:	81a3      	strh	r3, [r4, #12]
 8001338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133c:	463a      	mov	r2, r7
 800133e:	6921      	ldr	r1, [r4, #16]
 8001340:	f000 fac4 	bl	80018cc <memcpy>
 8001344:	89a3      	ldrh	r3, [r4, #12]
 8001346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800134a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134e:	81a3      	strh	r3, [r4, #12]
 8001350:	6126      	str	r6, [r4, #16]
 8001352:	443e      	add	r6, r7
 8001354:	6026      	str	r6, [r4, #0]
 8001356:	4646      	mov	r6, r8
 8001358:	6165      	str	r5, [r4, #20]
 800135a:	1bed      	subs	r5, r5, r7
 800135c:	60a5      	str	r5, [r4, #8]
 800135e:	4546      	cmp	r6, r8
 8001360:	bf28      	it	cs
 8001362:	4646      	movcs	r6, r8
 8001364:	4649      	mov	r1, r9
 8001366:	4632      	mov	r2, r6
 8001368:	6820      	ldr	r0, [r4, #0]
 800136a:	f000 faba 	bl	80018e2 <memmove>
 800136e:	68a3      	ldr	r3, [r4, #8]
 8001370:	2000      	movs	r0, #0
 8001372:	1b9b      	subs	r3, r3, r6
 8001374:	60a3      	str	r3, [r4, #8]
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	441e      	add	r6, r3
 800137a:	6026      	str	r6, [r4, #0]
 800137c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001380:	462a      	mov	r2, r5
 8001382:	f000 fb73 	bl	8001a6c <_realloc_r>
 8001386:	4606      	mov	r6, r0
 8001388:	2800      	cmp	r0, #0
 800138a:	d1e1      	bne.n	8001350 <__ssputs_r+0x70>
 800138c:	6921      	ldr	r1, [r4, #16]
 800138e:	4650      	mov	r0, sl
 8001390:	f000 fac2 	bl	8001918 <_free_r>
 8001394:	e7c7      	b.n	8001326 <__ssputs_r+0x46>
	...

08001398 <_svfiprintf_r>:
 8001398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800139c:	b09d      	sub	sp, #116	; 0x74
 800139e:	9303      	str	r3, [sp, #12]
 80013a0:	898b      	ldrh	r3, [r1, #12]
 80013a2:	4680      	mov	r8, r0
 80013a4:	061c      	lsls	r4, r3, #24
 80013a6:	460d      	mov	r5, r1
 80013a8:	4616      	mov	r6, r2
 80013aa:	d50f      	bpl.n	80013cc <_svfiprintf_r+0x34>
 80013ac:	690b      	ldr	r3, [r1, #16]
 80013ae:	b96b      	cbnz	r3, 80013cc <_svfiprintf_r+0x34>
 80013b0:	2140      	movs	r1, #64	; 0x40
 80013b2:	f000 fafd 	bl	80019b0 <_malloc_r>
 80013b6:	6028      	str	r0, [r5, #0]
 80013b8:	6128      	str	r0, [r5, #16]
 80013ba:	b928      	cbnz	r0, 80013c8 <_svfiprintf_r+0x30>
 80013bc:	230c      	movs	r3, #12
 80013be:	f8c8 3000 	str.w	r3, [r8]
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295
 80013c6:	e0c4      	b.n	8001552 <_svfiprintf_r+0x1ba>
 80013c8:	2340      	movs	r3, #64	; 0x40
 80013ca:	616b      	str	r3, [r5, #20]
 80013cc:	2300      	movs	r3, #0
 80013ce:	9309      	str	r3, [sp, #36]	; 0x24
 80013d0:	2320      	movs	r3, #32
 80013d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80013d6:	2330      	movs	r3, #48	; 0x30
 80013d8:	f04f 0b01 	mov.w	fp, #1
 80013dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013e0:	4637      	mov	r7, r6
 80013e2:	463c      	mov	r4, r7
 80013e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d13c      	bne.n	8001466 <_svfiprintf_r+0xce>
 80013ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80013f0:	d00b      	beq.n	800140a <_svfiprintf_r+0x72>
 80013f2:	4653      	mov	r3, sl
 80013f4:	4632      	mov	r2, r6
 80013f6:	4629      	mov	r1, r5
 80013f8:	4640      	mov	r0, r8
 80013fa:	f7ff ff71 	bl	80012e0 <__ssputs_r>
 80013fe:	3001      	adds	r0, #1
 8001400:	f000 80a2 	beq.w	8001548 <_svfiprintf_r+0x1b0>
 8001404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001406:	4453      	add	r3, sl
 8001408:	9309      	str	r3, [sp, #36]	; 0x24
 800140a:	783b      	ldrb	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 809b 	beq.w	8001548 <_svfiprintf_r+0x1b0>
 8001412:	2300      	movs	r3, #0
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	9304      	str	r3, [sp, #16]
 800141a:	9307      	str	r3, [sp, #28]
 800141c:	9205      	str	r2, [sp, #20]
 800141e:	9306      	str	r3, [sp, #24]
 8001420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001424:	931a      	str	r3, [sp, #104]	; 0x68
 8001426:	2205      	movs	r2, #5
 8001428:	7821      	ldrb	r1, [r4, #0]
 800142a:	4850      	ldr	r0, [pc, #320]	; (800156c <_svfiprintf_r+0x1d4>)
 800142c:	f000 fa40 	bl	80018b0 <memchr>
 8001430:	1c67      	adds	r7, r4, #1
 8001432:	9b04      	ldr	r3, [sp, #16]
 8001434:	b9d8      	cbnz	r0, 800146e <_svfiprintf_r+0xd6>
 8001436:	06d9      	lsls	r1, r3, #27
 8001438:	bf44      	itt	mi
 800143a:	2220      	movmi	r2, #32
 800143c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001440:	071a      	lsls	r2, r3, #28
 8001442:	bf44      	itt	mi
 8001444:	222b      	movmi	r2, #43	; 0x2b
 8001446:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800144a:	7822      	ldrb	r2, [r4, #0]
 800144c:	2a2a      	cmp	r2, #42	; 0x2a
 800144e:	d016      	beq.n	800147e <_svfiprintf_r+0xe6>
 8001450:	2100      	movs	r1, #0
 8001452:	200a      	movs	r0, #10
 8001454:	9a07      	ldr	r2, [sp, #28]
 8001456:	4627      	mov	r7, r4
 8001458:	783b      	ldrb	r3, [r7, #0]
 800145a:	3401      	adds	r4, #1
 800145c:	3b30      	subs	r3, #48	; 0x30
 800145e:	2b09      	cmp	r3, #9
 8001460:	d950      	bls.n	8001504 <_svfiprintf_r+0x16c>
 8001462:	b1c9      	cbz	r1, 8001498 <_svfiprintf_r+0x100>
 8001464:	e011      	b.n	800148a <_svfiprintf_r+0xf2>
 8001466:	2b25      	cmp	r3, #37	; 0x25
 8001468:	d0c0      	beq.n	80013ec <_svfiprintf_r+0x54>
 800146a:	4627      	mov	r7, r4
 800146c:	e7b9      	b.n	80013e2 <_svfiprintf_r+0x4a>
 800146e:	4a3f      	ldr	r2, [pc, #252]	; (800156c <_svfiprintf_r+0x1d4>)
 8001470:	463c      	mov	r4, r7
 8001472:	1a80      	subs	r0, r0, r2
 8001474:	fa0b f000 	lsl.w	r0, fp, r0
 8001478:	4318      	orrs	r0, r3
 800147a:	9004      	str	r0, [sp, #16]
 800147c:	e7d3      	b.n	8001426 <_svfiprintf_r+0x8e>
 800147e:	9a03      	ldr	r2, [sp, #12]
 8001480:	1d11      	adds	r1, r2, #4
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	9103      	str	r1, [sp, #12]
 8001486:	2a00      	cmp	r2, #0
 8001488:	db01      	blt.n	800148e <_svfiprintf_r+0xf6>
 800148a:	9207      	str	r2, [sp, #28]
 800148c:	e004      	b.n	8001498 <_svfiprintf_r+0x100>
 800148e:	4252      	negs	r2, r2
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	9207      	str	r2, [sp, #28]
 8001496:	9304      	str	r3, [sp, #16]
 8001498:	783b      	ldrb	r3, [r7, #0]
 800149a:	2b2e      	cmp	r3, #46	; 0x2e
 800149c:	d10d      	bne.n	80014ba <_svfiprintf_r+0x122>
 800149e:	787b      	ldrb	r3, [r7, #1]
 80014a0:	1c79      	adds	r1, r7, #1
 80014a2:	2b2a      	cmp	r3, #42	; 0x2a
 80014a4:	d132      	bne.n	800150c <_svfiprintf_r+0x174>
 80014a6:	9b03      	ldr	r3, [sp, #12]
 80014a8:	3702      	adds	r7, #2
 80014aa:	1d1a      	adds	r2, r3, #4
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	9203      	str	r2, [sp, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bfb8      	it	lt
 80014b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80014b8:	9305      	str	r3, [sp, #20]
 80014ba:	4c2d      	ldr	r4, [pc, #180]	; (8001570 <_svfiprintf_r+0x1d8>)
 80014bc:	2203      	movs	r2, #3
 80014be:	7839      	ldrb	r1, [r7, #0]
 80014c0:	4620      	mov	r0, r4
 80014c2:	f000 f9f5 	bl	80018b0 <memchr>
 80014c6:	b138      	cbz	r0, 80014d8 <_svfiprintf_r+0x140>
 80014c8:	2340      	movs	r3, #64	; 0x40
 80014ca:	1b00      	subs	r0, r0, r4
 80014cc:	fa03 f000 	lsl.w	r0, r3, r0
 80014d0:	9b04      	ldr	r3, [sp, #16]
 80014d2:	3701      	adds	r7, #1
 80014d4:	4303      	orrs	r3, r0
 80014d6:	9304      	str	r3, [sp, #16]
 80014d8:	7839      	ldrb	r1, [r7, #0]
 80014da:	2206      	movs	r2, #6
 80014dc:	4825      	ldr	r0, [pc, #148]	; (8001574 <_svfiprintf_r+0x1dc>)
 80014de:	1c7e      	adds	r6, r7, #1
 80014e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014e4:	f000 f9e4 	bl	80018b0 <memchr>
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d035      	beq.n	8001558 <_svfiprintf_r+0x1c0>
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <_svfiprintf_r+0x1e0>)
 80014ee:	b9fb      	cbnz	r3, 8001530 <_svfiprintf_r+0x198>
 80014f0:	9b03      	ldr	r3, [sp, #12]
 80014f2:	3307      	adds	r3, #7
 80014f4:	f023 0307 	bic.w	r3, r3, #7
 80014f8:	3308      	adds	r3, #8
 80014fa:	9303      	str	r3, [sp, #12]
 80014fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014fe:	444b      	add	r3, r9
 8001500:	9309      	str	r3, [sp, #36]	; 0x24
 8001502:	e76d      	b.n	80013e0 <_svfiprintf_r+0x48>
 8001504:	fb00 3202 	mla	r2, r0, r2, r3
 8001508:	2101      	movs	r1, #1
 800150a:	e7a4      	b.n	8001456 <_svfiprintf_r+0xbe>
 800150c:	2300      	movs	r3, #0
 800150e:	240a      	movs	r4, #10
 8001510:	4618      	mov	r0, r3
 8001512:	9305      	str	r3, [sp, #20]
 8001514:	460f      	mov	r7, r1
 8001516:	783a      	ldrb	r2, [r7, #0]
 8001518:	3101      	adds	r1, #1
 800151a:	3a30      	subs	r2, #48	; 0x30
 800151c:	2a09      	cmp	r2, #9
 800151e:	d903      	bls.n	8001528 <_svfiprintf_r+0x190>
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0ca      	beq.n	80014ba <_svfiprintf_r+0x122>
 8001524:	9005      	str	r0, [sp, #20]
 8001526:	e7c8      	b.n	80014ba <_svfiprintf_r+0x122>
 8001528:	fb04 2000 	mla	r0, r4, r0, r2
 800152c:	2301      	movs	r3, #1
 800152e:	e7f1      	b.n	8001514 <_svfiprintf_r+0x17c>
 8001530:	ab03      	add	r3, sp, #12
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	462a      	mov	r2, r5
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <_svfiprintf_r+0x1e4>)
 8001538:	a904      	add	r1, sp, #16
 800153a:	4640      	mov	r0, r8
 800153c:	f3af 8000 	nop.w
 8001540:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001544:	4681      	mov	r9, r0
 8001546:	d1d9      	bne.n	80014fc <_svfiprintf_r+0x164>
 8001548:	89ab      	ldrh	r3, [r5, #12]
 800154a:	065b      	lsls	r3, r3, #25
 800154c:	f53f af39 	bmi.w	80013c2 <_svfiprintf_r+0x2a>
 8001550:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001552:	b01d      	add	sp, #116	; 0x74
 8001554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001558:	ab03      	add	r3, sp, #12
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	462a      	mov	r2, r5
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_svfiprintf_r+0x1e4>)
 8001560:	a904      	add	r1, sp, #16
 8001562:	4640      	mov	r0, r8
 8001564:	f000 f884 	bl	8001670 <_printf_i>
 8001568:	e7ea      	b.n	8001540 <_svfiprintf_r+0x1a8>
 800156a:	bf00      	nop
 800156c:	08001b56 	.word	0x08001b56
 8001570:	08001b5c 	.word	0x08001b5c
 8001574:	08001b60 	.word	0x08001b60
 8001578:	00000000 	.word	0x00000000
 800157c:	080012e1 	.word	0x080012e1

08001580 <_printf_common>:
 8001580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001584:	4691      	mov	r9, r2
 8001586:	461f      	mov	r7, r3
 8001588:	688a      	ldr	r2, [r1, #8]
 800158a:	690b      	ldr	r3, [r1, #16]
 800158c:	4606      	mov	r6, r0
 800158e:	4293      	cmp	r3, r2
 8001590:	bfb8      	it	lt
 8001592:	4613      	movlt	r3, r2
 8001594:	f8c9 3000 	str.w	r3, [r9]
 8001598:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800159c:	460c      	mov	r4, r1
 800159e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015a2:	b112      	cbz	r2, 80015aa <_printf_common+0x2a>
 80015a4:	3301      	adds	r3, #1
 80015a6:	f8c9 3000 	str.w	r3, [r9]
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	0699      	lsls	r1, r3, #26
 80015ae:	bf42      	ittt	mi
 80015b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80015b4:	3302      	addmi	r3, #2
 80015b6:	f8c9 3000 	strmi.w	r3, [r9]
 80015ba:	6825      	ldr	r5, [r4, #0]
 80015bc:	f015 0506 	ands.w	r5, r5, #6
 80015c0:	d107      	bne.n	80015d2 <_printf_common+0x52>
 80015c2:	f104 0a19 	add.w	sl, r4, #25
 80015c6:	68e3      	ldr	r3, [r4, #12]
 80015c8:	f8d9 2000 	ldr.w	r2, [r9]
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	429d      	cmp	r5, r3
 80015d0:	db2a      	blt.n	8001628 <_printf_common+0xa8>
 80015d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	3300      	adds	r3, #0
 80015da:	bf18      	it	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	0692      	lsls	r2, r2, #26
 80015e0:	d42f      	bmi.n	8001642 <_printf_common+0xc2>
 80015e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015e6:	4639      	mov	r1, r7
 80015e8:	4630      	mov	r0, r6
 80015ea:	47c0      	blx	r8
 80015ec:	3001      	adds	r0, #1
 80015ee:	d022      	beq.n	8001636 <_printf_common+0xb6>
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	68e5      	ldr	r5, [r4, #12]
 80015f4:	f003 0306 	and.w	r3, r3, #6
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	bf18      	it	ne
 80015fc:	2500      	movne	r5, #0
 80015fe:	f8d9 2000 	ldr.w	r2, [r9]
 8001602:	f04f 0900 	mov.w	r9, #0
 8001606:	bf08      	it	eq
 8001608:	1aad      	subeq	r5, r5, r2
 800160a:	68a3      	ldr	r3, [r4, #8]
 800160c:	6922      	ldr	r2, [r4, #16]
 800160e:	bf08      	it	eq
 8001610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001614:	4293      	cmp	r3, r2
 8001616:	bfc4      	itt	gt
 8001618:	1a9b      	subgt	r3, r3, r2
 800161a:	18ed      	addgt	r5, r5, r3
 800161c:	341a      	adds	r4, #26
 800161e:	454d      	cmp	r5, r9
 8001620:	d11b      	bne.n	800165a <_printf_common+0xda>
 8001622:	2000      	movs	r0, #0
 8001624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001628:	2301      	movs	r3, #1
 800162a:	4652      	mov	r2, sl
 800162c:	4639      	mov	r1, r7
 800162e:	4630      	mov	r0, r6
 8001630:	47c0      	blx	r8
 8001632:	3001      	adds	r0, #1
 8001634:	d103      	bne.n	800163e <_printf_common+0xbe>
 8001636:	f04f 30ff 	mov.w	r0, #4294967295
 800163a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800163e:	3501      	adds	r5, #1
 8001640:	e7c1      	b.n	80015c6 <_printf_common+0x46>
 8001642:	2030      	movs	r0, #48	; 0x30
 8001644:	18e1      	adds	r1, r4, r3
 8001646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001650:	4422      	add	r2, r4
 8001652:	3302      	adds	r3, #2
 8001654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001658:	e7c3      	b.n	80015e2 <_printf_common+0x62>
 800165a:	2301      	movs	r3, #1
 800165c:	4622      	mov	r2, r4
 800165e:	4639      	mov	r1, r7
 8001660:	4630      	mov	r0, r6
 8001662:	47c0      	blx	r8
 8001664:	3001      	adds	r0, #1
 8001666:	d0e6      	beq.n	8001636 <_printf_common+0xb6>
 8001668:	f109 0901 	add.w	r9, r9, #1
 800166c:	e7d7      	b.n	800161e <_printf_common+0x9e>
	...

08001670 <_printf_i>:
 8001670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001674:	4617      	mov	r7, r2
 8001676:	7e0a      	ldrb	r2, [r1, #24]
 8001678:	b085      	sub	sp, #20
 800167a:	2a6e      	cmp	r2, #110	; 0x6e
 800167c:	4698      	mov	r8, r3
 800167e:	4606      	mov	r6, r0
 8001680:	460c      	mov	r4, r1
 8001682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001684:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001688:	f000 80bc 	beq.w	8001804 <_printf_i+0x194>
 800168c:	d81a      	bhi.n	80016c4 <_printf_i+0x54>
 800168e:	2a63      	cmp	r2, #99	; 0x63
 8001690:	d02e      	beq.n	80016f0 <_printf_i+0x80>
 8001692:	d80a      	bhi.n	80016aa <_printf_i+0x3a>
 8001694:	2a00      	cmp	r2, #0
 8001696:	f000 80c8 	beq.w	800182a <_printf_i+0x1ba>
 800169a:	2a58      	cmp	r2, #88	; 0x58
 800169c:	f000 808a 	beq.w	80017b4 <_printf_i+0x144>
 80016a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80016a8:	e02a      	b.n	8001700 <_printf_i+0x90>
 80016aa:	2a64      	cmp	r2, #100	; 0x64
 80016ac:	d001      	beq.n	80016b2 <_printf_i+0x42>
 80016ae:	2a69      	cmp	r2, #105	; 0x69
 80016b0:	d1f6      	bne.n	80016a0 <_printf_i+0x30>
 80016b2:	6821      	ldr	r1, [r4, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016ba:	d023      	beq.n	8001704 <_printf_i+0x94>
 80016bc:	1d11      	adds	r1, r2, #4
 80016be:	6019      	str	r1, [r3, #0]
 80016c0:	6813      	ldr	r3, [r2, #0]
 80016c2:	e027      	b.n	8001714 <_printf_i+0xa4>
 80016c4:	2a73      	cmp	r2, #115	; 0x73
 80016c6:	f000 80b4 	beq.w	8001832 <_printf_i+0x1c2>
 80016ca:	d808      	bhi.n	80016de <_printf_i+0x6e>
 80016cc:	2a6f      	cmp	r2, #111	; 0x6f
 80016ce:	d02a      	beq.n	8001726 <_printf_i+0xb6>
 80016d0:	2a70      	cmp	r2, #112	; 0x70
 80016d2:	d1e5      	bne.n	80016a0 <_printf_i+0x30>
 80016d4:	680a      	ldr	r2, [r1, #0]
 80016d6:	f042 0220 	orr.w	r2, r2, #32
 80016da:	600a      	str	r2, [r1, #0]
 80016dc:	e003      	b.n	80016e6 <_printf_i+0x76>
 80016de:	2a75      	cmp	r2, #117	; 0x75
 80016e0:	d021      	beq.n	8001726 <_printf_i+0xb6>
 80016e2:	2a78      	cmp	r2, #120	; 0x78
 80016e4:	d1dc      	bne.n	80016a0 <_printf_i+0x30>
 80016e6:	2278      	movs	r2, #120	; 0x78
 80016e8:	496f      	ldr	r1, [pc, #444]	; (80018a8 <_printf_i+0x238>)
 80016ea:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80016ee:	e064      	b.n	80017ba <_printf_i+0x14a>
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80016f6:	1d11      	adds	r1, r2, #4
 80016f8:	6019      	str	r1, [r3, #0]
 80016fa:	6813      	ldr	r3, [r2, #0]
 80016fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001700:	2301      	movs	r3, #1
 8001702:	e0a3      	b.n	800184c <_printf_i+0x1dc>
 8001704:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001708:	f102 0104 	add.w	r1, r2, #4
 800170c:	6019      	str	r1, [r3, #0]
 800170e:	d0d7      	beq.n	80016c0 <_printf_i+0x50>
 8001710:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001714:	2b00      	cmp	r3, #0
 8001716:	da03      	bge.n	8001720 <_printf_i+0xb0>
 8001718:	222d      	movs	r2, #45	; 0x2d
 800171a:	425b      	negs	r3, r3
 800171c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001720:	4962      	ldr	r1, [pc, #392]	; (80018ac <_printf_i+0x23c>)
 8001722:	220a      	movs	r2, #10
 8001724:	e017      	b.n	8001756 <_printf_i+0xe6>
 8001726:	6820      	ldr	r0, [r4, #0]
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800172e:	d003      	beq.n	8001738 <_printf_i+0xc8>
 8001730:	1d08      	adds	r0, r1, #4
 8001732:	6018      	str	r0, [r3, #0]
 8001734:	680b      	ldr	r3, [r1, #0]
 8001736:	e006      	b.n	8001746 <_printf_i+0xd6>
 8001738:	f010 0f40 	tst.w	r0, #64	; 0x40
 800173c:	f101 0004 	add.w	r0, r1, #4
 8001740:	6018      	str	r0, [r3, #0]
 8001742:	d0f7      	beq.n	8001734 <_printf_i+0xc4>
 8001744:	880b      	ldrh	r3, [r1, #0]
 8001746:	2a6f      	cmp	r2, #111	; 0x6f
 8001748:	bf14      	ite	ne
 800174a:	220a      	movne	r2, #10
 800174c:	2208      	moveq	r2, #8
 800174e:	4957      	ldr	r1, [pc, #348]	; (80018ac <_printf_i+0x23c>)
 8001750:	2000      	movs	r0, #0
 8001752:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001756:	6865      	ldr	r5, [r4, #4]
 8001758:	2d00      	cmp	r5, #0
 800175a:	60a5      	str	r5, [r4, #8]
 800175c:	f2c0 809c 	blt.w	8001898 <_printf_i+0x228>
 8001760:	6820      	ldr	r0, [r4, #0]
 8001762:	f020 0004 	bic.w	r0, r0, #4
 8001766:	6020      	str	r0, [r4, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d13f      	bne.n	80017ec <_printf_i+0x17c>
 800176c:	2d00      	cmp	r5, #0
 800176e:	f040 8095 	bne.w	800189c <_printf_i+0x22c>
 8001772:	4675      	mov	r5, lr
 8001774:	2a08      	cmp	r2, #8
 8001776:	d10b      	bne.n	8001790 <_printf_i+0x120>
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	07da      	lsls	r2, r3, #31
 800177c:	d508      	bpl.n	8001790 <_printf_i+0x120>
 800177e:	6923      	ldr	r3, [r4, #16]
 8001780:	6862      	ldr	r2, [r4, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	bfde      	ittt	le
 8001786:	2330      	movle	r3, #48	; 0x30
 8001788:	f805 3c01 	strble.w	r3, [r5, #-1]
 800178c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001790:	ebae 0305 	sub.w	r3, lr, r5
 8001794:	6123      	str	r3, [r4, #16]
 8001796:	f8cd 8000 	str.w	r8, [sp]
 800179a:	463b      	mov	r3, r7
 800179c:	aa03      	add	r2, sp, #12
 800179e:	4621      	mov	r1, r4
 80017a0:	4630      	mov	r0, r6
 80017a2:	f7ff feed 	bl	8001580 <_printf_common>
 80017a6:	3001      	adds	r0, #1
 80017a8:	d155      	bne.n	8001856 <_printf_i+0x1e6>
 80017aa:	f04f 30ff 	mov.w	r0, #4294967295
 80017ae:	b005      	add	sp, #20
 80017b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80017b8:	493c      	ldr	r1, [pc, #240]	; (80018ac <_printf_i+0x23c>)
 80017ba:	6822      	ldr	r2, [r4, #0]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80017c2:	f100 0504 	add.w	r5, r0, #4
 80017c6:	601d      	str	r5, [r3, #0]
 80017c8:	d001      	beq.n	80017ce <_printf_i+0x15e>
 80017ca:	6803      	ldr	r3, [r0, #0]
 80017cc:	e002      	b.n	80017d4 <_printf_i+0x164>
 80017ce:	0655      	lsls	r5, r2, #25
 80017d0:	d5fb      	bpl.n	80017ca <_printf_i+0x15a>
 80017d2:	8803      	ldrh	r3, [r0, #0]
 80017d4:	07d0      	lsls	r0, r2, #31
 80017d6:	bf44      	itt	mi
 80017d8:	f042 0220 	orrmi.w	r2, r2, #32
 80017dc:	6022      	strmi	r2, [r4, #0]
 80017de:	b91b      	cbnz	r3, 80017e8 <_printf_i+0x178>
 80017e0:	6822      	ldr	r2, [r4, #0]
 80017e2:	f022 0220 	bic.w	r2, r2, #32
 80017e6:	6022      	str	r2, [r4, #0]
 80017e8:	2210      	movs	r2, #16
 80017ea:	e7b1      	b.n	8001750 <_printf_i+0xe0>
 80017ec:	4675      	mov	r5, lr
 80017ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80017f2:	fb02 3310 	mls	r3, r2, r0, r3
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80017fc:	4603      	mov	r3, r0
 80017fe:	2800      	cmp	r0, #0
 8001800:	d1f5      	bne.n	80017ee <_printf_i+0x17e>
 8001802:	e7b7      	b.n	8001774 <_printf_i+0x104>
 8001804:	6808      	ldr	r0, [r1, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	f010 0f80 	tst.w	r0, #128	; 0x80
 800180c:	6949      	ldr	r1, [r1, #20]
 800180e:	d004      	beq.n	800181a <_printf_i+0x1aa>
 8001810:	1d10      	adds	r0, r2, #4
 8001812:	6018      	str	r0, [r3, #0]
 8001814:	6813      	ldr	r3, [r2, #0]
 8001816:	6019      	str	r1, [r3, #0]
 8001818:	e007      	b.n	800182a <_printf_i+0x1ba>
 800181a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800181e:	f102 0004 	add.w	r0, r2, #4
 8001822:	6018      	str	r0, [r3, #0]
 8001824:	6813      	ldr	r3, [r2, #0]
 8001826:	d0f6      	beq.n	8001816 <_printf_i+0x1a6>
 8001828:	8019      	strh	r1, [r3, #0]
 800182a:	2300      	movs	r3, #0
 800182c:	4675      	mov	r5, lr
 800182e:	6123      	str	r3, [r4, #16]
 8001830:	e7b1      	b.n	8001796 <_printf_i+0x126>
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	1d11      	adds	r1, r2, #4
 8001836:	6019      	str	r1, [r3, #0]
 8001838:	6815      	ldr	r5, [r2, #0]
 800183a:	2100      	movs	r1, #0
 800183c:	6862      	ldr	r2, [r4, #4]
 800183e:	4628      	mov	r0, r5
 8001840:	f000 f836 	bl	80018b0 <memchr>
 8001844:	b108      	cbz	r0, 800184a <_printf_i+0x1da>
 8001846:	1b40      	subs	r0, r0, r5
 8001848:	6060      	str	r0, [r4, #4]
 800184a:	6863      	ldr	r3, [r4, #4]
 800184c:	6123      	str	r3, [r4, #16]
 800184e:	2300      	movs	r3, #0
 8001850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001854:	e79f      	b.n	8001796 <_printf_i+0x126>
 8001856:	6923      	ldr	r3, [r4, #16]
 8001858:	462a      	mov	r2, r5
 800185a:	4639      	mov	r1, r7
 800185c:	4630      	mov	r0, r6
 800185e:	47c0      	blx	r8
 8001860:	3001      	adds	r0, #1
 8001862:	d0a2      	beq.n	80017aa <_printf_i+0x13a>
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	079b      	lsls	r3, r3, #30
 8001868:	d507      	bpl.n	800187a <_printf_i+0x20a>
 800186a:	2500      	movs	r5, #0
 800186c:	f104 0919 	add.w	r9, r4, #25
 8001870:	68e3      	ldr	r3, [r4, #12]
 8001872:	9a03      	ldr	r2, [sp, #12]
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	429d      	cmp	r5, r3
 8001878:	db05      	blt.n	8001886 <_printf_i+0x216>
 800187a:	68e0      	ldr	r0, [r4, #12]
 800187c:	9b03      	ldr	r3, [sp, #12]
 800187e:	4298      	cmp	r0, r3
 8001880:	bfb8      	it	lt
 8001882:	4618      	movlt	r0, r3
 8001884:	e793      	b.n	80017ae <_printf_i+0x13e>
 8001886:	2301      	movs	r3, #1
 8001888:	464a      	mov	r2, r9
 800188a:	4639      	mov	r1, r7
 800188c:	4630      	mov	r0, r6
 800188e:	47c0      	blx	r8
 8001890:	3001      	adds	r0, #1
 8001892:	d08a      	beq.n	80017aa <_printf_i+0x13a>
 8001894:	3501      	adds	r5, #1
 8001896:	e7eb      	b.n	8001870 <_printf_i+0x200>
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1a7      	bne.n	80017ec <_printf_i+0x17c>
 800189c:	780b      	ldrb	r3, [r1, #0]
 800189e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018a6:	e765      	b.n	8001774 <_printf_i+0x104>
 80018a8:	08001b78 	.word	0x08001b78
 80018ac:	08001b67 	.word	0x08001b67

080018b0 <memchr>:
 80018b0:	b510      	push	{r4, lr}
 80018b2:	b2c9      	uxtb	r1, r1
 80018b4:	4402      	add	r2, r0
 80018b6:	4290      	cmp	r0, r2
 80018b8:	4603      	mov	r3, r0
 80018ba:	d101      	bne.n	80018c0 <memchr+0x10>
 80018bc:	2000      	movs	r0, #0
 80018be:	bd10      	pop	{r4, pc}
 80018c0:	781c      	ldrb	r4, [r3, #0]
 80018c2:	3001      	adds	r0, #1
 80018c4:	428c      	cmp	r4, r1
 80018c6:	d1f6      	bne.n	80018b6 <memchr+0x6>
 80018c8:	4618      	mov	r0, r3
 80018ca:	bd10      	pop	{r4, pc}

080018cc <memcpy>:
 80018cc:	b510      	push	{r4, lr}
 80018ce:	1e43      	subs	r3, r0, #1
 80018d0:	440a      	add	r2, r1
 80018d2:	4291      	cmp	r1, r2
 80018d4:	d100      	bne.n	80018d8 <memcpy+0xc>
 80018d6:	bd10      	pop	{r4, pc}
 80018d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018e0:	e7f7      	b.n	80018d2 <memcpy+0x6>

080018e2 <memmove>:
 80018e2:	4288      	cmp	r0, r1
 80018e4:	b510      	push	{r4, lr}
 80018e6:	eb01 0302 	add.w	r3, r1, r2
 80018ea:	d803      	bhi.n	80018f4 <memmove+0x12>
 80018ec:	1e42      	subs	r2, r0, #1
 80018ee:	4299      	cmp	r1, r3
 80018f0:	d10c      	bne.n	800190c <memmove+0x2a>
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	4298      	cmp	r0, r3
 80018f6:	d2f9      	bcs.n	80018ec <memmove+0xa>
 80018f8:	1881      	adds	r1, r0, r2
 80018fa:	1ad2      	subs	r2, r2, r3
 80018fc:	42d3      	cmn	r3, r2
 80018fe:	d100      	bne.n	8001902 <memmove+0x20>
 8001900:	bd10      	pop	{r4, pc}
 8001902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001906:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800190a:	e7f7      	b.n	80018fc <memmove+0x1a>
 800190c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001910:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001914:	e7eb      	b.n	80018ee <memmove+0xc>
	...

08001918 <_free_r>:
 8001918:	b538      	push	{r3, r4, r5, lr}
 800191a:	4605      	mov	r5, r0
 800191c:	2900      	cmp	r1, #0
 800191e:	d043      	beq.n	80019a8 <_free_r+0x90>
 8001920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001924:	1f0c      	subs	r4, r1, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	bfb8      	it	lt
 800192a:	18e4      	addlt	r4, r4, r3
 800192c:	f000 f8d4 	bl	8001ad8 <__malloc_lock>
 8001930:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <_free_r+0x94>)
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	4610      	mov	r0, r2
 8001936:	b933      	cbnz	r3, 8001946 <_free_r+0x2e>
 8001938:	6063      	str	r3, [r4, #4]
 800193a:	6014      	str	r4, [r2, #0]
 800193c:	4628      	mov	r0, r5
 800193e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001942:	f000 b8ca 	b.w	8001ada <__malloc_unlock>
 8001946:	42a3      	cmp	r3, r4
 8001948:	d90b      	bls.n	8001962 <_free_r+0x4a>
 800194a:	6821      	ldr	r1, [r4, #0]
 800194c:	1862      	adds	r2, r4, r1
 800194e:	4293      	cmp	r3, r2
 8001950:	bf01      	itttt	eq
 8001952:	681a      	ldreq	r2, [r3, #0]
 8001954:	685b      	ldreq	r3, [r3, #4]
 8001956:	1852      	addeq	r2, r2, r1
 8001958:	6022      	streq	r2, [r4, #0]
 800195a:	6063      	str	r3, [r4, #4]
 800195c:	6004      	str	r4, [r0, #0]
 800195e:	e7ed      	b.n	800193c <_free_r+0x24>
 8001960:	4613      	mov	r3, r2
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	b10a      	cbz	r2, 800196a <_free_r+0x52>
 8001966:	42a2      	cmp	r2, r4
 8001968:	d9fa      	bls.n	8001960 <_free_r+0x48>
 800196a:	6819      	ldr	r1, [r3, #0]
 800196c:	1858      	adds	r0, r3, r1
 800196e:	42a0      	cmp	r0, r4
 8001970:	d10b      	bne.n	800198a <_free_r+0x72>
 8001972:	6820      	ldr	r0, [r4, #0]
 8001974:	4401      	add	r1, r0
 8001976:	1858      	adds	r0, r3, r1
 8001978:	4282      	cmp	r2, r0
 800197a:	6019      	str	r1, [r3, #0]
 800197c:	d1de      	bne.n	800193c <_free_r+0x24>
 800197e:	6810      	ldr	r0, [r2, #0]
 8001980:	6852      	ldr	r2, [r2, #4]
 8001982:	4401      	add	r1, r0
 8001984:	6019      	str	r1, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	e7d8      	b.n	800193c <_free_r+0x24>
 800198a:	d902      	bls.n	8001992 <_free_r+0x7a>
 800198c:	230c      	movs	r3, #12
 800198e:	602b      	str	r3, [r5, #0]
 8001990:	e7d4      	b.n	800193c <_free_r+0x24>
 8001992:	6820      	ldr	r0, [r4, #0]
 8001994:	1821      	adds	r1, r4, r0
 8001996:	428a      	cmp	r2, r1
 8001998:	bf01      	itttt	eq
 800199a:	6811      	ldreq	r1, [r2, #0]
 800199c:	6852      	ldreq	r2, [r2, #4]
 800199e:	1809      	addeq	r1, r1, r0
 80019a0:	6021      	streq	r1, [r4, #0]
 80019a2:	6062      	str	r2, [r4, #4]
 80019a4:	605c      	str	r4, [r3, #4]
 80019a6:	e7c9      	b.n	800193c <_free_r+0x24>
 80019a8:	bd38      	pop	{r3, r4, r5, pc}
 80019aa:	bf00      	nop
 80019ac:	20000088 	.word	0x20000088

080019b0 <_malloc_r>:
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	1ccd      	adds	r5, r1, #3
 80019b4:	f025 0503 	bic.w	r5, r5, #3
 80019b8:	3508      	adds	r5, #8
 80019ba:	2d0c      	cmp	r5, #12
 80019bc:	bf38      	it	cc
 80019be:	250c      	movcc	r5, #12
 80019c0:	2d00      	cmp	r5, #0
 80019c2:	4606      	mov	r6, r0
 80019c4:	db01      	blt.n	80019ca <_malloc_r+0x1a>
 80019c6:	42a9      	cmp	r1, r5
 80019c8:	d903      	bls.n	80019d2 <_malloc_r+0x22>
 80019ca:	230c      	movs	r3, #12
 80019cc:	6033      	str	r3, [r6, #0]
 80019ce:	2000      	movs	r0, #0
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
 80019d2:	f000 f881 	bl	8001ad8 <__malloc_lock>
 80019d6:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <_malloc_r+0xb4>)
 80019d8:	6814      	ldr	r4, [r2, #0]
 80019da:	4621      	mov	r1, r4
 80019dc:	b991      	cbnz	r1, 8001a04 <_malloc_r+0x54>
 80019de:	4c22      	ldr	r4, [pc, #136]	; (8001a68 <_malloc_r+0xb8>)
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	b91b      	cbnz	r3, 80019ec <_malloc_r+0x3c>
 80019e4:	4630      	mov	r0, r6
 80019e6:	f000 f867 	bl	8001ab8 <_sbrk_r>
 80019ea:	6020      	str	r0, [r4, #0]
 80019ec:	4629      	mov	r1, r5
 80019ee:	4630      	mov	r0, r6
 80019f0:	f000 f862 	bl	8001ab8 <_sbrk_r>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d126      	bne.n	8001a46 <_malloc_r+0x96>
 80019f8:	230c      	movs	r3, #12
 80019fa:	4630      	mov	r0, r6
 80019fc:	6033      	str	r3, [r6, #0]
 80019fe:	f000 f86c 	bl	8001ada <__malloc_unlock>
 8001a02:	e7e4      	b.n	80019ce <_malloc_r+0x1e>
 8001a04:	680b      	ldr	r3, [r1, #0]
 8001a06:	1b5b      	subs	r3, r3, r5
 8001a08:	d41a      	bmi.n	8001a40 <_malloc_r+0x90>
 8001a0a:	2b0b      	cmp	r3, #11
 8001a0c:	d90f      	bls.n	8001a2e <_malloc_r+0x7e>
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	18cc      	adds	r4, r1, r3
 8001a12:	50cd      	str	r5, [r1, r3]
 8001a14:	4630      	mov	r0, r6
 8001a16:	f000 f860 	bl	8001ada <__malloc_unlock>
 8001a1a:	f104 000b 	add.w	r0, r4, #11
 8001a1e:	1d23      	adds	r3, r4, #4
 8001a20:	f020 0007 	bic.w	r0, r0, #7
 8001a24:	1ac3      	subs	r3, r0, r3
 8001a26:	d01b      	beq.n	8001a60 <_malloc_r+0xb0>
 8001a28:	425a      	negs	r2, r3
 8001a2a:	50e2      	str	r2, [r4, r3]
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
 8001a2e:	428c      	cmp	r4, r1
 8001a30:	bf0b      	itete	eq
 8001a32:	6863      	ldreq	r3, [r4, #4]
 8001a34:	684b      	ldrne	r3, [r1, #4]
 8001a36:	6013      	streq	r3, [r2, #0]
 8001a38:	6063      	strne	r3, [r4, #4]
 8001a3a:	bf18      	it	ne
 8001a3c:	460c      	movne	r4, r1
 8001a3e:	e7e9      	b.n	8001a14 <_malloc_r+0x64>
 8001a40:	460c      	mov	r4, r1
 8001a42:	6849      	ldr	r1, [r1, #4]
 8001a44:	e7ca      	b.n	80019dc <_malloc_r+0x2c>
 8001a46:	1cc4      	adds	r4, r0, #3
 8001a48:	f024 0403 	bic.w	r4, r4, #3
 8001a4c:	42a0      	cmp	r0, r4
 8001a4e:	d005      	beq.n	8001a5c <_malloc_r+0xac>
 8001a50:	1a21      	subs	r1, r4, r0
 8001a52:	4630      	mov	r0, r6
 8001a54:	f000 f830 	bl	8001ab8 <_sbrk_r>
 8001a58:	3001      	adds	r0, #1
 8001a5a:	d0cd      	beq.n	80019f8 <_malloc_r+0x48>
 8001a5c:	6025      	str	r5, [r4, #0]
 8001a5e:	e7d9      	b.n	8001a14 <_malloc_r+0x64>
 8001a60:	bd70      	pop	{r4, r5, r6, pc}
 8001a62:	bf00      	nop
 8001a64:	20000088 	.word	0x20000088
 8001a68:	2000008c 	.word	0x2000008c

08001a6c <_realloc_r>:
 8001a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a6e:	4607      	mov	r7, r0
 8001a70:	4614      	mov	r4, r2
 8001a72:	460e      	mov	r6, r1
 8001a74:	b921      	cbnz	r1, 8001a80 <_realloc_r+0x14>
 8001a76:	4611      	mov	r1, r2
 8001a78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001a7c:	f7ff bf98 	b.w	80019b0 <_malloc_r>
 8001a80:	b922      	cbnz	r2, 8001a8c <_realloc_r+0x20>
 8001a82:	f7ff ff49 	bl	8001918 <_free_r>
 8001a86:	4625      	mov	r5, r4
 8001a88:	4628      	mov	r0, r5
 8001a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a8c:	f000 f826 	bl	8001adc <_malloc_usable_size_r>
 8001a90:	4284      	cmp	r4, r0
 8001a92:	d90f      	bls.n	8001ab4 <_realloc_r+0x48>
 8001a94:	4621      	mov	r1, r4
 8001a96:	4638      	mov	r0, r7
 8001a98:	f7ff ff8a 	bl	80019b0 <_malloc_r>
 8001a9c:	4605      	mov	r5, r0
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d0f2      	beq.n	8001a88 <_realloc_r+0x1c>
 8001aa2:	4631      	mov	r1, r6
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	f7ff ff11 	bl	80018cc <memcpy>
 8001aaa:	4631      	mov	r1, r6
 8001aac:	4638      	mov	r0, r7
 8001aae:	f7ff ff33 	bl	8001918 <_free_r>
 8001ab2:	e7e9      	b.n	8001a88 <_realloc_r+0x1c>
 8001ab4:	4635      	mov	r5, r6
 8001ab6:	e7e7      	b.n	8001a88 <_realloc_r+0x1c>

08001ab8 <_sbrk_r>:
 8001ab8:	b538      	push	{r3, r4, r5, lr}
 8001aba:	2300      	movs	r3, #0
 8001abc:	4c05      	ldr	r4, [pc, #20]	; (8001ad4 <_sbrk_r+0x1c>)
 8001abe:	4605      	mov	r5, r0
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	6023      	str	r3, [r4, #0]
 8001ac4:	f000 f814 	bl	8001af0 <_sbrk>
 8001ac8:	1c43      	adds	r3, r0, #1
 8001aca:	d102      	bne.n	8001ad2 <_sbrk_r+0x1a>
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	b103      	cbz	r3, 8001ad2 <_sbrk_r+0x1a>
 8001ad0:	602b      	str	r3, [r5, #0]
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}
 8001ad4:	200000d8 	.word	0x200000d8

08001ad8 <__malloc_lock>:
 8001ad8:	4770      	bx	lr

08001ada <__malloc_unlock>:
 8001ada:	4770      	bx	lr

08001adc <_malloc_usable_size_r>:
 8001adc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	f1a0 0004 	sub.w	r0, r0, #4
 8001ae6:	bfbc      	itt	lt
 8001ae8:	580b      	ldrlt	r3, [r1, r0]
 8001aea:	18c0      	addlt	r0, r0, r3
 8001aec:	4770      	bx	lr
	...

08001af0 <_sbrk>:
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <_sbrk+0x14>)
 8001af2:	4602      	mov	r2, r0
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	b909      	cbnz	r1, 8001afc <_sbrk+0xc>
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <_sbrk+0x18>)
 8001afa:	6019      	str	r1, [r3, #0]
 8001afc:	6818      	ldr	r0, [r3, #0]
 8001afe:	4402      	add	r2, r0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	4770      	bx	lr
 8001b04:	20000090 	.word	0x20000090
 8001b08:	200000dc 	.word	0x200000dc

08001b0c <_init>:
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	bf00      	nop
 8001b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b12:	bc08      	pop	{r3}
 8001b14:	469e      	mov	lr, r3
 8001b16:	4770      	bx	lr

08001b18 <_fini>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	bf00      	nop
 8001b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1e:	bc08      	pop	{r3}
 8001b20:	469e      	mov	lr, r3
 8001b22:	4770      	bx	lr
